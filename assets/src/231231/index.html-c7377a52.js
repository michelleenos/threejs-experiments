import{b as V,p as te,f as b,q as ie,V as a,r as F,s as E,W as se,H as oe,S as re,U as ne,G as X,t as W,u as D,v as N,w as ae,O as le,x as ce,y as Y,I as $,z as j,E as he,Q as de,A as Z,J as q,K as me,D as ue,d as ge,X as pe}from"../../three.core-dda14ae8.js";import{G as fe}from"../../lil-gui.esm-ee8b5e9f.js";import{S as ye}from"../../stats.module-8826aad6.js";/* empty css                  */import{l as G,m as U,c as B}from"../../utils-100a9827.js";import{M as we}from"../../Mouse-461e017e.js";import{S as xe}from"../../sizes-40a94193.js";import{T as Se}from"../../timer-c04e4641.js";import{W as be}from"../../World-fed11d95.js";import"../../three.module-bbe333d0.js";import"../../OrbitControls-cba99037.js";class C extends V{constructor(e,i={}){super(e),this.isReflector=!0,this.type="Reflector",this.forceUpdate=!1,this.camera=new te;const s=this,o=i.color!==void 0?new b(i.color):new b(8355711),r=i.textureWidth||512,n=i.textureHeight||512,g=i.clipBias||0,c=i.shader||C.ReflectorShader,m=i.multisample!==void 0?i.multisample:4,h=new ie,d=new a,y=new a,f=new a,l=new F,S=new a(0,0,-1),x=new E,v=new a,k=new a,_=new E,z=new F,p=this.camera,M=new se(r,n,{samples:m,type:oe}),R=new re({name:c.name!==void 0?c.name:"unspecified",uniforms:ne.clone(c.uniforms),fragmentShader:c.fragmentShader,vertexShader:c.vertexShader});R.uniforms.tDiffuse.value=M.texture,R.uniforms.color.value=o,R.uniforms.textureMatrix.value=z,this.material=R,this.onBeforeRender=function(u,Q,P){if(y.setFromMatrixPosition(s.matrixWorld),f.setFromMatrixPosition(P.matrixWorld),l.extractRotation(s.matrixWorld),d.set(0,0,1),d.applyMatrix4(l),v.subVectors(y,f),v.dot(d)>0===!0&&this.forceUpdate===!1)return;v.reflect(d).negate(),v.add(y),l.extractRotation(P.matrixWorld),S.set(0,0,-1),S.applyMatrix4(l),S.add(f),k.subVectors(y,S),k.reflect(d).negate(),k.add(y),p.position.copy(v),p.up.set(0,1,0),p.up.applyMatrix4(l),p.up.reflect(d),p.lookAt(k),p.far=P.far,p.updateMatrixWorld(),p.projectionMatrix.copy(P.projectionMatrix),z.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),z.multiply(p.projectionMatrix),z.multiply(p.matrixWorldInverse),z.multiply(s.matrixWorld),h.setFromNormalAndCoplanarPoint(d,y),h.applyMatrix4(p.matrixWorldInverse),x.set(h.normal.x,h.normal.y,h.normal.z,h.constant);const w=p.projectionMatrix;_.x=(Math.sign(x.x)+w.elements[8])/w.elements[0],_.y=(Math.sign(x.y)+w.elements[9])/w.elements[5],_.z=-1,_.w=(1+w.elements[10])/w.elements[14],x.multiplyScalar(2/x.dot(_)),w.elements[2]=x.x,w.elements[6]=x.y,w.elements[10]=x.z+1-g,w.elements[14]=x.w,s.visible=!1;const J=u.getRenderTarget(),K=u.xr.enabled,ee=u.shadowMap.autoUpdate;u.xr.enabled=!1,u.shadowMap.autoUpdate=!1,u.setRenderTarget(M),u.state.buffers.depth.setMask(!0),u.autoClear===!1&&u.clear(),u.render(Q,p),u.xr.enabled=K,u.shadowMap.autoUpdate=ee,u.setRenderTarget(J);const T=P.viewport;T!==void 0&&u.state.viewport(T),s.visible=!0,this.forceUpdate=!1},this.getRenderTarget=function(){return M},this.dispose=function(){M.dispose(),s.material.dispose()}}}C.ReflectorShader={name:"ReflectorShader",uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:`
		uniform mat4 textureMatrix;
		varying vec4 vUv;

		#include <common>
		#include <logdepthbuf_pars_vertex>

		void main() {

			vUv = textureMatrix * vec4( position, 1.0 );

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

			#include <logdepthbuf_vertex>

		}`,fragmentShader:`
		uniform vec3 color;
		uniform sampler2D tDiffuse;
		varying vec4 vUv;

		#include <logdepthbuf_pars_fragment>

		float blendOverlay( float base, float blend ) {

			return( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );

		}

		vec3 blendOverlay( vec3 base, vec3 blend ) {

			return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );

		}

		void main() {

			#include <logdepthbuf_fragment>

			vec4 base = texture2DProj( tDiffuse, vUv );
			gl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>

		}`};class ve extends X{mirror;floor;geometry;windowSizes;_planeDist;_size;_mirrorColor;constructor(e,{size:i=new N(100,100),mirrorColor:s="#66ffff",screenColor:o="#bf94ff",screenOpacity:r=.2,screenMetalness:n=1,screenRoughness:g=.6,planeDist:c=.1,position:m=new a(-25,-10,-25)}){super(),this.windowSizes=e,this._size=i,this._planeDist=c,this._mirrorColor=s,this.geometry=new W(i.x,i.y),this.floor=new V(this.geometry,new D({roughness:g,metalness:n,transparent:!0,opacity:r,color:o})),this.mirror=new C(this.geometry,{clipBias:.003,textureWidth:this.windowSizes.width*this.windowSizes.pixelRatio,textureHeight:this.windowSizes.height*this.windowSizes.pixelRatio,color:s}),this.add(this.mirror,this.floor),this.position.copy(m),this.rotation.set(Math.PI*-.5,0,0),this.floor.position.z=this._planeDist,this.windowSizes.on("resize",this.onWindowResize)}onWindowResize=()=>{this.mirror.getRenderTarget().setSize(this.windowSizes.width*this.windowSizes.pixelRatio,this.windowSizes.height*this.windowSizes.pixelRatio)};get mirrorColor(){return this._mirrorColor}set mirrorColor(e){this._mirrorColor=e,this.mirror.dispose(),this.remove(this.mirror),this.mirror=new C(this.geometry,{clipBias:.003,textureWidth:this.windowSizes.width*this.windowSizes.pixelRatio,textureHeight:this.windowSizes.height*this.windowSizes.pixelRatio,color:this._mirrorColor}),this.add(this.mirror)}get planeDist(){return this._planeDist}set planeDist(e){this._planeDist=e,this.floor.position.z=this._planeDist}get size(){return this._size}set size(e){this._size=e,this.geometry=new W(e.x,e.y),this.floor.geometry=this.geometry,this.mirror.geometry=this.geometry}dispose=()=>{this.remove(this.mirror,this.floor),this.mirror.dispose(),this.floor.material.dispose(),this.geometry.dispose()}}const _e=`
    float t = uTime * uSpeed + uNoiseId * 100.0;
    vec3 tx = vec3(transformed.x, transformed.y, transformed.z + t);
    vec3 ty = vec3(transformed.y, transformed.z, transformed.z + t);
    vec3 tz = vec3(transformed.z, transformed.x, transformed.z + t);

    transformed.x += cnoise(tx) * uNoiseAmount;
    transformed.y += cnoise(ty) * uNoiseAmount;
    transformed.z += cnoise(tz) * uNoiseAmount;
`,ze=`
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec3 P) {
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}
`,I={"THREE.Vector3":(t,e)=>(t.lerp(e,.1),t.distanceTo(e)>.01),number:(t,e)=>(t=G(t,e,.1),Math.abs(t-e)>.01),"THREE.Color":(t,e)=>(t.lerp(e,.1),t.getHexString()!==e.getHexString())};class L{raf=0;constructor(e){e instanceof ae?this._target=e.value:this._target=e,this._prop=e,e instanceof a?this._lerpStrategy=I["THREE.Vector3"]:e instanceof b?this._lerpStrategy=I["THREE.Color"]:this._lerpStrategy=I.number}set(e){this._target=e,this.raf&&window.cancelAnimationFrame(this.raf),this.raf=window.requestAnimationFrame(this.tick)}tick=()=>{this._lerpStrategy(this._prop,this._target)?window.requestAnimationFrame(this.tick):this.raf=0};cancel=()=>{this.raf&&window.cancelAnimationFrame(this.raf),this.raf=0}}class Pe extends V{_scale;_color;_vary;noiseId=Math.random()*100;shader;initPositions;constructor({radius:e=4,color:i="#fff",metalness:s=.5,roughness:o=.5,vary:r=.1,noiseSpeed:n=.001,noiseAmount:g=.3}={}){let c=new le(1,1),m=new D({color:i,metalness:s,roughness:o});m.onBeforeCompile=h=>{this.shader=h,this.updateShaderCode(h,n,g)},super(c,m),this._vary=r,this.scale.set(e,e,e),this._color=new L(this.material.color),this._scale=new L(this.scale),this.initPositions=this.geometry.getAttribute("position").clone(),this.setPositions()}set vary(e){this._vary=e,this.setPositions()}get vary(){return this._vary}set noiseAmount(e){this.shader&&(this.shader.uniforms.uNoiseAmount.value=e)}set noiseSpeed(e){this.shader&&(this.shader.uniforms.uSpeed.value=e)}setScale(e){this._scale.set(new a(e,e,e))}setColor(e,i=!1){i?this.material.color.copy(e):this._color.set(e)}setPositions=()=>{let e=this.initPositions.count,i=new a;this.geometry.setAttribute("position",this.initPositions.clone());let s=this.geometry.getAttribute("position"),o={};for(let r=0;r<e;r++){i.fromBufferAttribute(this.initPositions,r);let n=`${i.x.toFixed(2)}_${i.y.toFixed(2)}_${i.z.toFixed(2)}`;o[n]||(o[n]={x:i.x+(Math.random()-.5)*this._vary,y:i.y+(Math.random()-.5)*this._vary,z:i.z+(Math.random()-.5)*this._vary});let{x:g,y:c,z:m}=o[n];s.setXYZ(r,g,c,m)}this.geometry.computeVertexNormals()};updateShaderCode=(e,i,s)=>{e.uniforms.uTime={value:0},e.uniforms.uNoiseId={value:this.noiseId},e.uniforms.uSpeed={value:i},e.uniforms.uNoiseAmount={value:s},e.vertexShader=e.vertexShader.replace("#include <common>",`#include <common>
         uniform float uTime;
         uniform float uNoiseId;
         uniform float uNoiseAmount;
         uniform float uSpeed;
         ${ze}`),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>",`#include <begin_vertex>
         ${_e}`)};tick=e=>{this.shader&&(this.shader.uniforms.uTime.value=e)};dispose=()=>{this._color.cancel(),this._scale.cancel(),this.geometry.dispose(),this.material.dispose()}}const Ce={red:{start:.67,end:.05,offset:.4},green:{start:-.62,end:.23,offset:.23},blue:{start:0,end:1.04,offset:.25}};class ke extends X{outerGeometry;outerMaterial;outerInstance;wonkyShapes=[];colorOpts;camera;mouse;raycaster=new ce;intersecting=null;_coneRadius;_coneHeight;_coneSegments;_ringRadius;_wonkyRadius;_wonkyVary;_wonkyMetalness;_wonkyRoughness;_innerPosY;_wonkyShapeNoiseAmount;_wonkyShapeNoiseSpeed;needsUpdate={innerMaterial:!1,innerPos:!1};constructor(e,i,{innerPosY:s=6,posY:o=1,outerOpacity:r=.5,metalness:n=.5,roughness:g=.5,coneRadius:c=7.6,coneHeight:m=22,coneSegments:h=100,ringRadius:d=50,count:y=14,colorOpts:f=Ce,wonkyShapeOptions:l={}}={}){super(),this.mouse=i,this.camera=e,this.colorOpts=f,this._ringRadius=d,this._coneRadius=c,this._coneHeight=m,this._coneSegments=h,this._innerPosY=s,this.position.y=o,this.outerGeometry=new Y(this._coneRadius,this._coneHeight,this._coneSegments),this.outerGeometry.attributes.position.needsUpdate=!0,this.outerMaterial=new D({color:"#fff",opacity:r,metalness:n,roughness:g,transparent:!0}),this.outerInstance=new $(this.outerGeometry,this.outerMaterial,y),this.outerInstance.instanceMatrix.setUsage(j),this.outerInstance.position.set(0,0,0),this._wonkyRadius=l.radius??4,this._wonkyVary=l.vary??.2,this._wonkyMetalness=l.metalness??.5,this._wonkyRoughness=l.roughness??.5,this._wonkyShapeNoiseAmount=l.noiseAmount??.3,this._wonkyShapeNoiseSpeed=l.noiseSpeed??.001,this.rebuild(),this.add(this.outerInstance)}rebuild=()=>{this.wonkyShapes.forEach(i=>{i.dispose(),this.remove(i)}),this.wonkyShapes=[];let e={radius:this._wonkyRadius,vary:this._wonkyVary,metalness:this._wonkyMetalness,roughness:this._wonkyRoughness,noiseAmount:this._wonkyShapeNoiseAmount,noiseSpeed:this._wonkyShapeNoiseSpeed};for(let i=0;i<this.count;i++){let s=new Pe(e);this.wonkyShapes.push(s),this.add(s)}this.setShapes()};get coneRadius(){return this._coneRadius}get coneHeight(){return this._coneHeight}get coneSegments(){return this._coneSegments}set coneRadius(e){this._coneRadius=e,this.resetOuterGeometry()}set coneHeight(e){this._coneHeight=e,this.resetOuterGeometry()}set coneSegments(e){this._coneSegments=e,this.resetOuterGeometry()}get wonkyRadius(){return this._wonkyRadius}get wonkyVary(){return this._wonkyVary}get wonkyMetalness(){return this._wonkyMetalness}get wonkyRoughness(){return this._wonkyRoughness}get innerPosY(){return this._innerPosY}get wonkyShapeNoiseAmount(){return this._wonkyShapeNoiseAmount}get wonkyShapeNoiseSpeed(){return this._wonkyShapeNoiseSpeed}set wonkyRadius(e){this._wonkyRadius=e,this.wonkyShapes.forEach(i=>{i.setScale(e)})}set wonkyVary(e){this._wonkyVary=e,this.rebuild()}set wonkyMetalness(e){this._wonkyMetalness=e,this.needsUpdate.innerMaterial=!0}set wonkyRoughness(e){this._wonkyRoughness=e,this.needsUpdate.innerMaterial=!0}set innerPosY(e){this._innerPosY=e,this.needsUpdate.innerPos=!0}set wonkyShapeNoiseAmount(e){this._wonkyShapeNoiseAmount=e,this.wonkyShapes.forEach(i=>i.noiseAmount=e)}set wonkyShapeNoiseSpeed(e){this._wonkyShapeNoiseSpeed=e,this.wonkyShapes.forEach(i=>i.noiseSpeed=e)}get count(){return this.outerInstance.count}get ringRadius(){return this._ringRadius}set ringRadius(e){this._ringRadius=e,this.setShapes()}set count(e){this.remove(this.outerInstance),this.outerInstance.dispose(),this.outerInstance=new $(this.outerGeometry,this.outerMaterial,e),this.outerInstance.instanceMatrix.setUsage(j),this.outerInstance.position.set(0,0,0),this.add(this.outerInstance),this.rebuild()}updateColorOpt=(e,i,s)=>{this.colorOpts[e][i]=s,this.setShapes()};resetOuterGeometry=()=>{let e=this.outerGeometry;this.outerGeometry=new Y(this._coneRadius,this._coneHeight,this._coneSegments),this.outerInstance.geometry=this.outerGeometry,e.dispose()};getColorCoordAtIndex=(e,i)=>{const{offset:s,start:o,end:r}=this.colorOpts[i];let n=U(Math.sin((e/this.count+s)*Math.PI*2),-1,1,o,r);return B(n,0,1)};setShapes=()=>{const e=new F,i=new de;i.setFromEuler(new he(Math.PI,0,0));for(let s=0;s<this.count;s++){const o=s/this.count*Math.PI*2,r=new a(Math.cos(o)*this._ringRadius,0,Math.sin(o)*this._ringRadius);e.makeRotationFromQuaternion(i),e.setPosition(r),this.outerInstance.setMatrixAt(s,e),r.y+=this._innerPosY,this.wonkyShapes[s].position.copy(r);let n=new b(this.getColorCoordAtIndex(s,"red"),this.getColorCoordAtIndex(s,"green"),this.getColorCoordAtIndex(s,"blue"));this.outerInstance.setColorAt(s,n),this.wonkyShapes[s].material.userData.color=n,this.wonkyShapes[s].material.color.set(n)}this.outerInstance.instanceMatrix.needsUpdate=!0,this.outerInstance.instanceColor&&(this.outerInstance.instanceColor.needsUpdate=!0)};findIntersectedIndex=()=>{this.raycaster.setFromCamera(this.mouse.pos,this.camera);let i=this.raycaster.intersectObjects(this.children).find(s=>s.object===this.outerInstance);if(i)return i.instanceId};checkIntersects=()=>{let e=this.findIntersectedIndex();if(e||e===0){if(e===this.intersecting)return;this.resetIntersecting(),this.setIntersecting(e)}else this.resetIntersecting()};setIntersecting=e=>{this.wonkyShapes[e].setColor(new b("#ffffff")),this.wonkyShapes[e].setScale(this._wonkyRadius*1.25),this.intersecting=e};resetIntersecting=()=>{if(!this.intersecting&&this.intersecting!==0)return;let e=this.wonkyShapes[this.intersecting],i=new b(this.getColorCoordAtIndex(this.intersecting,"red"),this.getColorCoordAtIndex(this.intersecting,"green"),this.getColorCoordAtIndex(this.intersecting,"blue"));e.setColor(i),e.setScale(this._wonkyRadius),this.intersecting=null};tick=e=>{this.checkIntersects();for(let i=0;i<this.count;i++){let s=this.wonkyShapes[i];this.needsUpdate.innerMaterial&&(s.material.metalness=this._wonkyMetalness,s.material.roughness=this._wonkyRoughness),this.needsUpdate.innerPos&&(s.position.y=this._innerPosY),s.tick(e)}this.needsUpdate.innerMaterial=!1,this.needsUpdate.innerPos=!1};dispose=()=>{this.wonkyShapes.forEach(e=>{e.dispose(),this.remove(e)}),this.outerMaterial.dispose(),this.outerGeometry.dispose(),this.remove(this.outerInstance),this.outerInstance.dispose()}}const Me={clearColor:"#f2ebff",lightOptions:{ambient:{visible:!0,intensity:4.5,color:"#fafafa"},directional:{color:"#e5ffff",intensity:5.8,visible:!0,position:new a(-150,-6,-30)},point:{color:"#29ffa2",intensity:4.5,visible:!0,position:new a(-100,-124,-58),distance:0,decay:.1}},ringOptions:{innerPosY:6,posY:1,outerOpacity:.5,metalness:.36,roughness:.47,coneRadius:7.6,coneHeight:22,coneSegments:100,ringRadius:50,count:18,wonkyShapeOptions:{vary:.2,radius:3.7},colorOpts:{red:{start:.22,end:.89,offset:-.02},green:{start:-.37,end:.78,offset:-.38},blue:{start:.06,end:.97,offset:1.42}}},mirrorOptions:{mirrorColor:"#428a8a",screenColor:"#e8b5b5",screenRoughness:0,screenMetalness:0,screenOpacity:.4}},Re={clearColor:"#090f11",lightOptions:{ambient:{color:"#fafafa",visible:!1},directional:{visible:!0,intensity:4,color:"#ffffff",position:new a(0,10,50)},point:{color:"#ffffff",visible:!1}},ringOptions:{colorOpts:{red:{start:0,end:.3,offset:1.19},green:{start:.19,end:.89,offset:0},blue:{start:.19,end:1.19,offset:.6}}},mirrorOptions:{screenOpacity:.15,screenRoughness:.16,screenMetalness:.16,screenColor:"#ffffff",mirrorColor:"#ffffff"}},Ie={clearColor:"ff7a7a",lightOptions:{ambient:{color:"#25ad6d",intensity:5.6,visible:!0},directional:{visible:!0,intensity:5,color:"#ff0000",position:new a(-50,-107,7)},point:{color:"#8437ff",visible:!1,position:new a(-10,80,45),intensity:9,distance:0,decay:.1}},ringOptions:{innerPosY:6,posY:1,outerOpacity:.3,metalness:.83,roughness:.34,coneRadius:7.6,coneHeight:22,coneSegments:100,ringRadius:50,count:14,wonkyShapeOptions:{vary:.2,radius:4,roughness:.5,metalness:.39,noiseAmount:.3,noiseSpeed:.001},colorOpts:{red:{start:.34,end:0,offset:1},green:{start:1.15,end:1,offset:0},blue:{start:0,end:0,offset:.51}}},mirrorOptions:{mirrorColor:"#4b52b9",screenColor:"#ffffff",screenRoughness:.12,screenMetalness:.16,screenOpacity:.52}},Ae={clearColor:"#0c0911"},A=[Ae,Me,Re,Ie],O=(t,e,i)=>{const s=e.addFolder(t.type);let o={color:t.color.getHexString()};s.addColor(o,"color").onChange(r=>t.color.set(r)),s.add(t,"intensity",0,15,.1),s.add(t,"visible"),!(t instanceof Z)&&(s.add(t.position,"x",-300,300,1),s.add(t.position,"y",-300,300,1),s.add(t.position,"z",-300,300,1),t instanceof q&&(s.add(t,"distance",0,5e3,1),s.add(t,"decay",0,5,.1)),i&&(i.visible=!1,s.add(i,"visible").name("helper"),s.onChange(()=>i.update())))},Oe=(t,e)=>{const i=e.addFolder("Shapes").close();i.add(t.outerMaterial,"metalness",0,1,.01),i.add(t.outerMaterial,"roughness",0,1,.01),i.add(t.outerMaterial,"opacity",0,1,.01),i.add(t,"wonkyMetalness",0,1,.01),i.add(t,"wonkyRoughness",0,1,.01),i.add(t,"wonkyVary",0,5,.1),i.add(t,"wonkyRadius",0,5,.1),i.add(t,"coneRadius",0,50,.1),i.add(t,"coneHeight",0,50,.1),i.add(t,"coneSegments",0,200,1),i.add(t,"ringRadius",0,100,1),i.add(t,"count",0,100,1),i.add(t,"innerPosY",-10,10,.1),i.add(t,"wonkyShapeNoiseSpeed",0,.05,1e-4).name("noiseSpeed"),i.add(t,"wonkyShapeNoiseAmount",0,5,.01).name("noiseAmount"),i.add(t.position,"y",-10,10,.1);const s=e.addFolder("Shape Colors").close();for(let o of Object.keys(t.colorOpts))for(let r of Object.keys(t.colorOpts[o]))s.add(t.colorOpts[o],r,-1,2,.01).name(`${o} ${r}`).onChange(n=>t.updateColorOpt(o,r,n))},He=t=>{let{gui:e,mirror:i}=t;const s=e.addFolder("Floor/Mirror");s.add(i.floor.material,"opacity",0,1,.01),s.add(i.floor.material,"roughness",0,3,.01).name("floorRoughness"),s.add(i.floor.material,"metalness",0,3,.01).name("floorMetalness"),s.add(t.mirrorX,"min",-100,100,1).name("mirrorXmin"),s.add(t.mirrorX,"max",-100,100,1).name("mirrorXmax"),s.add(t.mirrorZ,"min",-100,100,1).name("mirrorZmin"),s.add(t.mirrorZ,"max",-100,100,1).name("mirrorZmax");const o={mirrorColor:i.mirrorColor,floorColor:i.floor.material.color.getHexString()};s.addColor(o,"floorColor").onChange(r=>{i.floor.material.color.set(r)}),s.addColor(o,"mirrorColor").onChange(r=>{i.mirrorColor=r}),s.add(i.size,"x",0,1e3,.1).name("width").onChange(r=>{i.size=new N(r,i.size.y)}),s.add(i.size,"y",0,1e3,.1).name("height").onChange(r=>{i.size=new N(i.size.x,r)}),s.close()},Fe=t=>{const e=t.gui.addFolder("Scene").close();let i=new b;t.world.renderer.getClearColor(i);let s={clearColor:i.getHexString()};e.addColor(s,"clearColor").onChange(o=>{t.clearColor=o}),e.add(t.world.controls,"enabled").name("controls").onChange(o=>{o||t.world.camera.position.copy(t.cameraPosDefault)}),e.add(t,"maxAcceleration",0,.5,.01),e.add(t,"velMult",0,1,.01)},Ne=t=>{Fe(t);let e=t.gui.addFolder("Lights").close();O(t.lights.ambient,e),O(t.lights.directional,e,t.lights.dirHelper),O(t.lights.point,e,t.lights.pointHelper),Oe(t.ring,t.gui),He(t);let i={preset:"",getPreset:()=>Ge(t)},s=[""].concat(Object.keys(A));t.gui.add(i,"preset",s).onChange(o=>{A[+o]&&(t.dispose(),t.setFromParams(A[+o]))}),t.gui.add(i,"getPreset")},Ge=t=>{const e=o=>`new THREE.Vector3(${o.x}, ${o.y}, ${o.z})`;let i={clearColor:`#${t.clearColor}`,lightOptions:{ambient:{color:`#${t.lights.ambient.color.getHexString()}`,intensity:t.lights.ambient.intensity,visible:t.lights.ambient.visible},directional:{visible:t.lights.directional.visible,intensity:t.lights.directional.intensity,color:`#${t.lights.directional.color.getHexString()}`,position:e(t.lights.directional.position)},point:{color:`#${t.lights.point.color.getHexString()}`,visible:t.lights.point.visible,position:e(t.lights.point.position),intensity:t.lights.point.intensity,distance:t.lights.point.distance,decay:t.lights.point.decay}},ringOptions:{innerPosY:t.ring.innerPosY,posY:t.ring.position.y,outerOpacity:t.ring.outerMaterial.opacity,metalness:t.ring.outerMaterial.metalness,roughness:t.ring.outerMaterial.roughness,coneRadius:t.ring.coneRadius,coneHeight:t.ring.coneHeight,coneSegments:t.ring.coneSegments,ringRadius:t.ring.ringRadius,count:t.ring.count,wonkyShapeOptions:{vary:t.ring.wonkyVary,radius:t.ring.wonkyRadius,roughness:t.ring.wonkyRoughness,metalness:t.ring.wonkyMetalness,noiseAmount:t.ring.wonkyShapeNoiseAmount,noiseSpeed:t.ring.wonkyShapeNoiseSpeed},colorOpts:{...t.ring.colorOpts}},mirrorOptions:{mirrorColor:t.mirror.mirrorColor,screenColor:`#${t.mirror.floor.material.color.getHexString()}`,screenRoughness:t.mirror.floor.material.roughness,screenMetalness:t.mirror.floor.material.metalness,screenOpacity:t.mirror.floor.material.opacity}},s=JSON.stringify(i,null,3);s=s.replace(/"([^"]+)":/g,"$1:"),s=s.replace(/"(new THREE.Vector3\(.+, .+, .+\))"/g,"$1"),navigator.clipboard.writeText(s).then(()=>{console.log("copied preset to clipboard")})};me.enabled=!0;const H={ambient:{color:"#fafafa",visible:!1},directional:{color:"#e5ffff",intensity:5.8,visible:!0,position:new a(-150,-6,-30)},point:{color:"#d9c2ff",intensity:9,distance:0,decay:.1,position:new a(-10,57,45),visible:!0}};class Ue{stats;gui;world;sizes;timer;mouse;lights;ring;mirror;maxAcceleration=.08;velMult=.98;cameraPosDefault=new a(0,40,100);mirrorX={min:-30,max:30};mirrorZ={min:-10,max:10};wheelVelocity=0;wheelAcceleration=0;constructor(e={}){this.stats=new ye,this.stats.dom.style.bottom="0px",this.stats.dom.style.top="",document.body.appendChild(this.stats.dom),this.sizes=new xe,this.mouse=new we(this.sizes),this.timer=new Se,this.world=new be(this.sizes),this.setFromParams(e),this.timer.on("tick",this.tick),window.addEventListener("wheel",this.onWheel)}setFromParams=({clearColor:e="#0c0911",maxAcceleration:i,velMult:s,cameraPosDefault:o,ringOptions:r={},mirrorOptions:n={},lightOptions:g={}})=>{i&&(this.maxAcceleration=i),s&&(this.velMult=s),o&&(this.cameraPosDefault=o),this.world.renderer.setClearColor(e),this.setCameraAndControls(),this.ring=new ke(this.world.camera,this.mouse,r),this.mirror=new ve(this.sizes,n);let c={...H.ambient,...g.ambient},m=new Z(c.color,c.intensity);m.visible=c.visible??!1;let h={...H.directional,...g.directional},d=new ue(h.color,h.intensity);d.position.copy(h.position),d.visible=h.visible??!1;let y=new ge(d,5),f={...H.point,...g.point},l=new q(f.color,f.intensity,f.distance,f.decay);l.position.copy(f.position),l.visible=f.visible??!1;let S=new pe(l,5);this.lights={ambient:m,directional:d,point:l,dirHelper:y,pointHelper:S},this.world.scene.add(this.ring,this.mirror,m,d,l,y,S),this.setupGui()};setCameraAndControls=()=>{this.world.camera.position.copy(this.cameraPosDefault),this.world.camera.far=200,this.world.camera.updateProjectionMatrix(),this.world.controls&&(this.world.controls.maxPolarAngle=Math.PI*.5,this.world.controls.minPolarAngle=Math.PI*0,this.world.controls.enableZoom=!1,this.world.controls.enabled=!1)};onWheel=e=>{this.wheelAcceleration=e.deltaY*1e-4};setupGui=()=>{this.gui=new fe,Ne(this)};set clearColor(e){this.world.renderer.setClearColor(e)}tick=()=>{this.stats.begin();const e=this.timer.elapsed;this.ring.tick(e);let i=U(this.mouse.pos.x,-1,1,this.mirrorX.min,this.mirrorX.max),s=U(this.mouse.pos.y,-1,1,this.mirrorZ.max,this.mirrorZ.min);this.mirror.position.x=G(this.mirror.position.x,i,.02),this.mirror.position.z=G(this.mirror.position.z,s,.02),this.wheelVelocity+=this.wheelAcceleration,this.wheelVelocity=B(this.wheelVelocity,-this.maxAcceleration,this.maxAcceleration),this.wheelAcceleration=0,this.wheelVelocity*=this.velMult,this.ring.rotation.y+=this.wheelVelocity,this.world.render(),this.stats.end()};dispose=()=>{this.world.scene.remove(this.ring,this.mirror,this.lights.ambient,this.lights.directional,this.lights.point,this.lights.dirHelper,this.lights.pointHelper),this.ring.dispose(),this.mirror.dispose(),this.lights.ambient.dispose(),this.lights.directional.dispose(),this.lights.dirHelper.dispose(),this.lights.point.dispose(),this.lights.pointHelper.dispose(),this.gui.destroy()}}new Ue;
