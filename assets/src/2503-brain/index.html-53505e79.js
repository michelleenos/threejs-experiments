import{f,F,Z as y,b as w,a3 as L,D as P,d as z,a4 as S,V as m,K as k,Y as A}from"../../three.core-cdbdf8aa.js";import{M as G}from"../../Mouse-e226e203.js";/* empty css                  */import{W as _}from"../../World-b0ac075c.js";import{S as E}from"../../sizes-40a94193.js";import{m as b}from"../../utils-100a9827.js";import{G as H}from"../../lil-gui.esm-ee8b5e9f.js";import{G as B}from"../../GLTFLoader-44ea4ceb.js";import"../../three.module-2b501472.js";import"../../OrbitControls-ed6ab3c1.js";function Z(a,{color1:e,color2:t,min:o=-1,max:s=1,axis:r="x"}){let h=a.attributes.position.count,n=[],i=a.attributes.position,c=new f(e),l=new f(t);for(let d=0;d<h;d++){let x=r==="x"?i.getX(d):r==="y"?i.getY(d):i.getZ(d),M=b(x,o,s,0,1),p=new f().copy(c).lerp(l,M);n.push(p.r,p.g,p.b)}a.setAttribute("color",new F(n,3))}const $="#00c2c1",D="#1414c2",u=[{x:-5,y:1.2,z:4,intensity:4},{x:0,y:1.2,z:4.5,intensity:5},{x:3,y:1.2,z:-5,intensity:5}];class U{world;mouse;sizes;clock=new y;dirLights=[];phongMat;brainGeo;brain;camPos={y:-.3,z:2,x:-.2};_mouseMovement=!0;moveSpeed=.025;moveAmount=.5;camZOffset=.2;_color1=$;_color2=D;debg;constructor({world:e,brain:t,mouse:o,dirLightInfo:s}){this.world=e,this.sizes=this.world.sizes,this.brainGeo=t,this.mouse=o,this.world.camera.position.set(this.camPos.x,this.camPos.y,this.camPos.z),this.world.renderer.setClearColor("#ffffff"),this.createMaterials(),this.setVertexColors(),this.brain=new w(this.brainGeo,this.phongMat),this.makeDirLights(s||u),this.world.scene.add(this.brain),this.setCamera(),this.sizes.on("resize",this.setCamera),this.debg=document.querySelector("#debug")||void 0}get mouseMovement(){return this._mouseMovement}set mouseMovement(e){this._mouseMovement=e,e||this.world.camera.rotation.set(0,0,0)}get color1(){return this._color1}set color1(e){this._color1=e,this.setVertexColors()}get color2(){return this._color2}set color2(e){this._color2=e,this.setVertexColors()}createMaterials(){this.phongMat=new L({vertexColors:!0})}setVertexColors(){Z(this.brainGeo,{color1:this._color1,color2:this._color2,min:-.8,max:.8,axis:"z"})}makeDirLights(e=u){this.dirLights.length&&this.dirLights.forEach(o=>{this.world.scene.remove(o.instance),this.world.scene.remove(o.helper),o.helper.dispose(),o.instance.dispose()}),this.dirLights=[];let t=["#9500ff","#00ff00","#ff0088","#ff9d00"];e.forEach(({x:o,y:s,z:r,intensity:h},n)=>{let i=new P("#ffffff",h);i.position.set(o,s,r),this.world.scene.add(i);let c=t[n%3],l=new z(i,2,c);this.world.scene.add(l),l.visible=!1,this.dirLights.push({instance:i,helper:l,helperColor:c})})}setCamera=()=>{let e=new S;e.setFromObject(this.brain);let t=new m,o=new m;e.getCenter(o),e.getSize(t);const s=this.world.camera.fov*(Math.PI/180),r=2*Math.atan(Math.tan(s/2)*this.world.camera.aspect);let h=Math.abs(t.x/2/Math.tan(r/2))+t.z/2,n=Math.abs(t.y/2/Math.tan(s/2)),i=Math.max(h,n)*(1+this.camZOffset);this.camPos.z=i,this.debg&&(this.debg.innerText=`
		 fov: ${this.world.camera.fov} fovh: ${r.toFixed(2)}<br/>
		 dx: ${h.toFixed(2)} dy: ${n.toFixed(2)} cameraZ: ${i.toFixed(2)}`)};tick=()=>{if(this.world.render(),this._mouseMovement){let e=this.camPos.z,t=this.camPos.x;t=b(this.mouse.pos.x,1,-1,this.camPos.x-this.moveAmount,this.camPos.x+this.moveAmount);let o=this.camPos.y;o=b(this.mouse.pos.y,1,-1,this.camPos.y-this.moveAmount,this.camPos.y+this.moveAmount),this.world.camera.position.lerp(new m(t,o,e),this.moveSpeed)}else this.world.camera.position.lerp(new m(this.camPos.x,this.camPos.y,this.camPos.z),this.moveSpeed);this.world.camera.lookAt(0,0,0),this.world.camera.updateProjectionMatrix(),window.requestAnimationFrame(this.tick)};animate=()=>{window.requestAnimationFrame(this.tick)}}class V{br;debg;folders={};gui;constructor(e,t){this.br=e,this.gui=t;let o=new f;this.br.world.renderer.getClearColor(o),this.debg={clearColor:o.getHexString(),lightHelpers:!1,phongSpecular:this.br.phongMat.specular.getHexString(),phongColor:this.br.phongMat.color.getHexString(),phongEmissive:this.br.phongMat.emissive.getHexString()}}init(){this.gui.addColor(this.debg,"clearColor").onChange(e=>{this.br.world.renderer.setClearColor(e)}),this.folders.movement=this.makeMoveFolder(),this.folders.cam=this.makeCamFolder(),this.folders.phong=this.makePhongFolder(),this.folders.lights=this.makeLightFolder()}foldersShowHide=(e,t)=>{e.forEach(o=>this.folders[o]?.show()),t.forEach(o=>this.folders[o]?.hide())};makeMoveFolder(){let e=this.gui.addFolder("Movement");return e.add(this.br,"mouseMovement"),e.add(this.br,"moveSpeed",0,.3,.001),e.add(this.br,"moveAmount",0,3,.01),e}makeCamFolder(){let e=this.gui.addFolder("camera");return e.add(this.br.world.camera,"fov",0,180,1).onChange(this.br.setCamera).listen().decimals(0),e.add(this.br,"camZOffset",-2,2,.1).onChange(this.br.setCamera),e.add(this.br.camPos,"x",-10,10,.1).name("camera x"),e.add(this.br.camPos,"y",-10,10,.1).name("camera y"),e}makePhongFolder(){let e=this.br.phongMat,t=this.gui.addFolder("Material").close();t.add(this.br.brain.material,"vertexColors").onChange(r=>{r?(o.show(),s.show(),e.color.set("#ffffff"),this.debg.phongColor="#ffffff"):(o.hide(),s.hide())});let o=t.addColor(this.br,"color1").name("vertex color 1"),s=t.addColor(this.br,"color2").name("vertex color 2");return t.onChange(()=>e.needsUpdate=!0),t.addColor(this.debg,"phongSpecular").onChange(r=>e.specular.set(r)),t.addColor(this.debg,"phongColor").onChange(r=>e.color.set(r)).listen(),t.addColor(this.debg,"phongEmissive").onChange(r=>e.emissive.set(r)),t.add(e,"shininess",0,100,1).onChange(()=>e.needsUpdate=!0),t}makeLightFolder(){let e=this.gui.addFolder("Lights").close();return e.add(this.debg,"lightHelpers").onChange(t=>{this.br.dirLights.forEach(o=>o.helper.visible=t)}).name("show helpers"),this.br.dirLights.forEach((t,o)=>{let s=e.addFolder(`light ${o+1}`);s.$title.style.borderLeft=`5px solid ${t.helperColor}`,s.onChange(()=>t.helper.update()),s.add(t.instance.position,"x",-10,10),s.add(t.instance.position,"y",-10,10),s.add(t.instance.position,"z",-10,10),s.add(t.instance,"intensity",0,10)}),e}}k.enabled=!0;const C=new E,v=new _(C,!1),I=new G(C);let g;v.renderer.outputColorSpace=A;const O="/threejs-experiments",j=new B;j.load(O+"/scenes/brain/Brain3-rotate-with-normals.glb",a=>{const e=a.scene.children;if(e[0]instanceof w){let o=e[0].geometry;g=new U({brain:o,world:v,mouse:I}),new V(g,new H).init(),g.animate(),console.log(g)}});
