import{f as Jt,v as ne,a5 as Qe,P as Je,l as ts,p as es,A as ss,D as ns,b as is,t as os,u as Re,Z as rs,V as pt,r as qe,Q as as,a9 as ls,a6 as cs,I as _e,x as hs,q as ds}from"../../three.core-cdbdf8aa.js";/* empty css                  */import{a as us}from"../../lil-gui.esm-ee8b5e9f.js";import{W as ps}from"../../three.module-2b501472.js";import{S as fs}from"../../stats.module-8826aad6.js";import{a as Pt}from"../../utils-100a9827.js";class et{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new a);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new a);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new et);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],l=s[2],c=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],y=n[0],v=n[1],w=n[2],m=n[3],x=n[4],g=n[5],C=n[6],A=n[7],N=n[8];return i[0]=o*y+r*m+l*C,i[1]=o*v+r*x+l*A,i[2]=o*w+r*g+l*N,i[3]=c*y+d*m+u*C,i[4]=c*v+d*x+u*A,i[5]=c*w+d*g+u*N,i[6]=h*y+f*m+p*C,i[7]=h*v+f*x+p*A,i[8]=h*w+f*g+p*N,e}scale(t,e){e===void 0&&(e=new et);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new a);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let l=3;const c=l;let d;const u=4;let h;do{if(o=c-l,i[o+n*o]===0){for(r=o+1;r<c;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<c;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--l);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new et);const e=3,s=6,n=ms;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const l=r;let c;const d=s;let u;do{if(i=l-r,n[i+s*i]===0){for(o=i+1;o<l;o++)if(n[i+s*o]!==0){c=d;do u=d-c,n[u+s*i]+=n[u+s*o];while(--c);break}}if(n[i+s*i]!==0)for(o=i+1;o<l;o++){const h=n[i+s*o]/n[i+s*i];c=d;do u=d-c,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--c)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];c=s;do u=s-c,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--c)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];c=s;do u=s-c,n[u+s*i]=n[u+s*i]*h;while(--c)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,l=n+n,c=e*o,d=e*r,u=e*l,h=s*r,f=s*l,p=n*l,y=i*o,v=i*r,w=i*l,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+v,m[3*1+0]=d+w,m[3*1+1]=1-(c+p),m[3*1+2]=f-y,m[3*2+0]=u-v,m[3*2+1]=f+y,m[3*2+2]=1-(c+h),this}transpose(t){t===void 0&&(t=new et);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const ms=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class a{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*i-l*n,e.y=l*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new a(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new a(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new et([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new a);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new a);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new a),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new a),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new a),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=vs,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=ys;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(de),de.almostEquals(t,e)}clone(){return new a(this.x,this.y,this.z)}}a.ZERO=new a(0,0,0);a.UNIT_X=new a(1,0,0);a.UNIT_Y=new a(0,1,0);a.UNIT_Z=new a(0,0,1);const vs=new a,ys=new a,de=new a;class K{constructor(t){t===void 0&&(t={}),this.lowerBound=new a,this.upperBound=new a,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let l=1;l<t.length;l++){let c=t[l];r&&(r.vmult(c,ue),c=ue),c.x>o.x&&(o.x=c.x),c.x<i.x&&(i.x=c.x),c.y>o.y&&(o.y=c.y),c.y<i.y&&(i.y=c.y),c.z>o.z&&(o.z=c.z),c.z<i.z&&(i.z=c.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new K().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,l=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,l){const c=this.lowerBound,d=this.upperBound;t.copy(c),e.set(d.x,c.y,c.z),s.set(d.x,d.y,c.z),n.set(c.x,d.y,d.z),i.set(d.x,c.y,d.z),o.set(c.x,d.y,c.z),r.set(c.x,c.y,d.z),l.copy(d)}toLocalFrame(t,e){const s=pe,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],c=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,l,c,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=pe,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],c=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,l,c,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,l=(this.upperBound.x-s.x)*n,c=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(c,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,l),Math.max(c,d)),Math.max(u,h));return!(p<0||f>p)}}const ue=new a,pe=[new a,new a,new a,new a,new a,new a,new a,new a];class fe{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Le{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class G{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new a),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ws,n=xs;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,l=t.y,c=t.z,d=t.w;return e.x=s*d+o*r+n*c-i*l,e.y=n*d+o*l+i*r-s*c,e.z=i*d+o*c+s*l-n*r,e.w=o*d-s*r-n*l-i*c,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z,c=this.w,d=c*s+r*i-l*n,u=c*n+l*s-o*i,h=c*i+o*n-r*s,f=-o*s-r*n-l*i;return e.x=d*c+f*-o+u*-l-h*-r,e.y=u*c+f*-r+h*-o-d*-l,e.z=h*c+f*-l+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,l=this.z,c=this.w;switch(e){case"YZX":const d=o*r+l*c;if(d>.499&&(s=2*Math.atan2(o,c),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,c),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=l*l;s=Math.atan2(2*r*c-2*o*l,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*c-2*r*l,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),c=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=l*o*r+i*c*d,this.y=i*c*r-l*o*d,this.z=i*o*d+l*c*r,this.w=i*o*r-l*c*d):n==="YXZ"?(this.x=l*o*r+i*c*d,this.y=i*c*r-l*o*d,this.z=i*o*d-l*c*r,this.w=i*o*r+l*c*d):n==="ZXY"?(this.x=l*o*r-i*c*d,this.y=i*c*r+l*o*d,this.z=i*o*d+l*c*r,this.w=i*o*r-l*c*d):n==="ZYX"?(this.x=l*o*r-i*c*d,this.y=i*c*r+l*o*d,this.z=i*o*d-l*c*r,this.w=i*o*r+l*c*d):n==="YZX"?(this.x=l*o*r+i*c*d,this.y=i*c*r+l*o*d,this.z=i*o*d-l*c*r,this.w=i*o*r-l*c*d):n==="XZY"&&(this.x=l*o*r-i*c*d,this.y=i*c*r-l*o*d,this.z=i*o*d+l*c*r,this.w=i*o*r+l*c*d),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const n=this.x,i=this.y,o=this.z,r=this.w;let l=t.x,c=t.y,d=t.z,u=t.w,h,f,p,y,v;return f=n*l+i*c+o*d+r*u,f<0&&(f=-f,l=-l,c=-c,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),y=Math.sin((1-e)*h)/p,v=Math.sin(e*h)/p):(y=1-e,v=e),s.x=y*n+v*l,s.y=y*i+v*c,s.z=y*o+v*d,s.w=y*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new G);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,c=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*c),n.y+=h*(o*u+r*l-i*d),n.z+=h*(r*u+i*c-o*l),n.w+=h*(-i*l-o*c-r*d),n}}const ws=new a,xs=new a,gs={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class B{constructor(t){t===void 0&&(t={}),this.id=B.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}B.idCounter=0;B.types=gs;class O{constructor(t){t===void 0&&(t={}),this.position=new a,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),s.vsub(t,n),e.conjugate(me),me.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new a),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new a),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const me=new G;class Mt extends B{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:B.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new a;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let l=0;l!==r;l++){const c=(l+1)%r;e[o[l]].vsub(e[o[c]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new a;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];Mt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new a,o=new a;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,l,c){const d=new a;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const y=s.vertices[s.faces[u][p]],v=new a;v.copy(y),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,c)}findSeparatingAxis(t,e,s,n,i,o,r,l){const c=new a,d=new a,u=new a,h=new a,f=new a,p=new a;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],c);const m=v.testSepAxis(c,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(c))}else{const w=r?r.length:v.faces.length;for(let m=0;m<w;m++){const x=r?r[m]:m;c.copy(v.faceNormals[x]),s.vmult(c,c);const g=v.testSepAxis(c,t,e,s,n,i);if(g===!1)return!1;g<y&&(y=g,o.copy(c))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=v.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(d))}else{const w=l?l.length:t.faces.length;for(let m=0;m<w;m++){const x=l?l[m]:m;d.copy(t.faceNormals[x]),i.vmult(d,d);const g=v.testSepAxis(d,t,e,s,n,i);if(g===!1)return!1;g<y&&(y=g,o.copy(d))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=v.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<y&&(y=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;Mt.project(r,t,s,n,Xt),Mt.project(e,t,i,o,Ut);const l=Xt[0],c=Xt[1],d=Ut[0],u=Ut[1];if(l<u||d<c)return!1;const h=l-u,f=d-c;return h<f?h:f}calculateLocalInertia(t,e){const s=new a,n=new a;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const l=new a,c=new a,d=new a,u=new a,h=new a,f=new a,p=new a,y=new a,v=this,w=[],m=n,x=w;let g=-1,C=Number.MAX_VALUE;for(let T=0;T<v.faces.length;T++){l.copy(v.faceNormals[T]),s.vmult(l,l);const R=l.dot(t);R<C&&(C=R,g=T)}if(g<0)return;const A=v.faces[g];A.connectedFaces=[];for(let T=0;T<v.faces.length;T++)for(let R=0;R<v.faces[T].length;R++)A.indexOf(v.faces[T][R])!==-1&&T!==g&&A.connectedFaces.indexOf(T)===-1&&A.connectedFaces.push(T);const N=A.length;for(let T=0;T<N;T++){const R=v.vertices[A[T]],L=v.vertices[A[(T+1)%N]];R.vsub(L,c),d.copy(c),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(R),s.vmult(f,f),e.vadd(f,f);const E=A.connectedFaces[T];p.copy(this.faceNormals[E]);const S=this.getPlaneConstantOfFace(E);y.copy(p),s.vmult(y,y);const M=S-y.dot(e);for(this.clipFaceAgainstPlane(m,x,y,M);m.length;)m.shift();for(;x.length;)m.push(x.shift())}p.copy(this.faceNormals[g]);const F=this.getPlaneConstantOfFace(g);y.copy(p),s.vmult(y,y);const q=F-y.dot(e);for(let T=0;T<m.length;T++){let R=y.dot(m[T])+q;if(R<=i&&(console.log(`clamped: depth=${R} to minDist=${i}`),R=i),R<=o){const L=m[T];if(R<=1e-6){const E={point:L,normal:y,depth:R};r.push(E)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],c=t[0];i=s.dot(l)+n;for(let d=0;d<r;d++){if(c=t[d],o=s.dot(c)+n,i<0)if(o<0){const u=new a;u.copy(c),e.push(u)}else{const u=new a;l.lerp(c,i/(i-o),u),e.push(u)}else if(o<0){const u=new a;l.lerp(c,i/(i-o),u),e.push(u),e.push(c)}l=c,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new a);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new a);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,l,c,d,u,h=new a;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(c===void 0||p.x>c)&&(c=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(l===void 0||p.z<l)&&(l=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,l),n.set(c,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new a);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new a;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let l=n[r];const c=e[s[r][0]],d=new a;t.vsub(c,d);const u=l.dot(d),h=new a;o.vsub(c,h);const f=l.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=bs;let l=0,c=0;const d=Es,u=t.vertices;d.setZero(),O.vectorToLocalFrame(s,n,e,r),O.pointToLocalFrame(s,n,d,d);const h=d.dot(r);c=l=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>l&&(l=p),p<c&&(c=p)}if(c-=h,l-=h,c>l){const f=c;c=l,l=f}i[0]=l,i[1]=c}}const Xt=[],Ut=[];new a;const bs=new a,Es=new a;class Vt extends B{constructor(t){super({type:B.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=a,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],l=new Mt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new a),Vt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)dt.set(i[o][0],i[o][1],i[o][2]),e.vmult(dt,dt),t.vadd(dt,dt),s(dt.x,dt.y,dt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;st[0].set(i.x,i.y,i.z),st[1].set(-i.x,i.y,i.z),st[2].set(-i.x,-i.y,i.z),st[3].set(-i.x,-i.y,-i.z),st[4].set(i.x,-i.y,-i.z),st[5].set(i.x,i.y,-i.z),st[6].set(-i.x,i.y,-i.z),st[7].set(i.x,-i.y,i.z);const o=st[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=st[r];e.vmult(l,l),t.vadd(l,l);const c=l.x,d=l.y,u=l.z;c>n.x&&(n.x=c),d>n.y&&(n.y=d),u>n.z&&(n.z=u),c<s.x&&(s.x=c),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const dt=new a,st=[new a,new a,new a,new a,new a,new a,new a,new a],ie={DYNAMIC:1,STATIC:2,KINEMATIC:4},oe={AWAKE:0,SLEEPY:1,SLEEPING:2};class I extends Le{constructor(t){t===void 0&&(t={}),super(),this.id=I.idCounter++,this.index=-1,this.world=null,this.vlambda=new a,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new a,this.previousPosition=new a,this.interpolatedPosition=new a,this.initPosition=new a,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new a,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new a,this.force=new a;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?I.STATIC:I.DYNAMIC,typeof t.type==typeof I.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=I.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new a,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new a,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new a,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new a,this.invInertia=new a,this.invInertiaWorld=new et,this.invMassSolve=0,this.invInertiaSolve=new a,this.invInertiaWorldSolve=new et,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new a(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new a(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new K,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new a,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=I.AWAKE,this.wakeUpAfterNarrowphase=!1,t===I.SLEEPING&&this.dispatchEvent(I.wakeupEvent)}sleep(){this.sleepState=I.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===I.AWAKE&&s<n?(this.sleepState=I.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(I.sleepyEvent)):e===I.SLEEPY&&s>n?this.wakeUp():e===I.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(I.sleepEvent))}}updateSolveMassProperties(){this.sleepState===I.SLEEPING||this.type===I.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new a),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new a),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new a,i=new G;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),l=o.boundingSphereRadius;r+l>n&&(n=r+l)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Cs,o=zs,r=this.quaternion,l=this.aabb,c=As;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,c.lowerBound,c.upperBound),d===0?l.copy(c):l.extend(c)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Ms,n=Ss;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new a),this.type!==I.DYNAMIC)return;this.sleepState===I.SLEEPING&&this.wakeUp();const s=Ns;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new a),this.type!==I.DYNAMIC)return;const s=Is,n=Ts;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===I.DYNAMIC&&(this.sleepState===I.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new a),this.type!==I.DYNAMIC)return;this.sleepState===I.SLEEPING&&this.wakeUp();const s=e,n=Fs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=Ps;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new a),this.type!==I.DYNAMIC)return;const s=Rs,n=qs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=_s;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Vt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new a;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===I.DYNAMIC||this.type===I.KINEMATIC)||this.sleepState===I.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,l=this.torque,c=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,y=this.angularFactor,v=l.x*y.x,w=l.y*y.y,m=l.z*y.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*m),i.y+=t*(p[3]*v+p[4]*w+p[5]*m),i.z+=t*(p[6]*v+p[7]*w+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,c.integrate(this.angularVelocity,t,this.angularFactor,c),e&&(s?c.normalizeFast():c.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}I.idCounter=0;I.COLLIDE_EVENT_NAME="collide";I.DYNAMIC=ie.DYNAMIC;I.STATIC=ie.STATIC;I.KINEMATIC=ie.KINEMATIC;I.AWAKE=oe.AWAKE;I.SLEEPY=oe.SLEEPY;I.SLEEPING=oe.SLEEPING;I.wakeupEvent={type:"wakeup"};I.sleepyEvent={type:"sleepy"};I.sleepEvent={type:"sleep"};const Cs=new a,zs=new G,As=new K,Ms=new et,Ss=new et,Bs=new et,Ns=new a,Is=new a,Ts=new a,Fs=new a,Ps=new a,Rs=new a,qs=new a,_s=new a;class ke{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&I.STATIC||t.sleepState===I.SLEEPING)&&(e.type&I.STATIC||e.sleepState===I.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Ls;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=ks,n=Os,i=Ws,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=n[r].id,c=i[r].id,d=l<c?`${l},${c}`:`${c},${l}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),c=s[l];t.push(n[c]),e.push(i[c]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new a;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Ls=new a;new a;new G;new a;const ks={keys:[]},Os=[],Ws=[];new a;new a;new a;class js extends ke{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let l=0;l!==i;l++)for(let c=0;c!==l;c++)o=n[l],r=n[c],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Wt{constructor(){this.rayFromWorld=new a,this.rayToWorld=new a,this.hitNormalWorld=new a,this.hitPointWorld=new a,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let Oe,We,je,Ve,Ge,He,Ye;const re={CLOSEST:1,ANY:2,ALL:4};Oe=B.types.SPHERE;We=B.types.PLANE;je=B.types.BOX;Ve=B.types.CYLINDER;Ge=B.types.CONVEXPOLYHEDRON;He=B.types.HEIGHTFIELD;Ye=B.types.TRIMESH;class V{get[Oe](){return this._intersectSphere}get[We](){return this._intersectPlane}get[je](){return this._intersectBox}get[Ve](){return this._intersectConvex}get[Ge](){return this._intersectConvex}get[He](){return this._intersectHeightfield}get[Ye](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new a),e===void 0&&(e=new a),this.from=t.clone(),this.to=e.clone(),this.direction=new a,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=V.ANY,this.result=new Wt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||V.ANY,this.result=e.result||new Wt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ve),$t.length=0,t.broadphase.aabbQuery(t,ve,$t),this.intersectBodies($t),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=Vs,i=Gs;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(l,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(nn(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,l=this.direction,c=new a(0,0,1);e.vmult(c,c);const d=new a;o.vsub(s,d);const u=d.dot(c);r.vsub(s,d);const h=d.dot(c);if(u*h>0||o.distanceTo(r)<u)return;const f=c.dot(l);if(Math.abs(f)<this.precision)return;const p=new a,y=new a,v=new a;o.vsub(s,p);const w=-c.dot(p)/f;l.scale(w,y),o.vadd(y,v),this.reportIntersection(c,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Hs;o.from.copy(this.from),o.to.copy(this.to),O.pointToLocalFrame(s,e,o.from,o.from),O.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Ys;let l,c,d,u;l=c=0,d=u=t.data.length-1;const h=new K;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),l=Math.max(l,r[0]),c=Math.max(c,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=l;f<d;f++)for(let p=c;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,Rt),this._intersectConvex(t.pillarConvex,e,Rt,n,i,ye),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,Rt),this._intersectConvex(t.pillarConvex,e,Rt,n,i,ye)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,l=t.radius,c=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,h=d**2-4*c*u,f=Ds,p=Xs;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const y=(-d-Math.sqrt(h))/(2*c),v=(-d+Math.sqrt(h))/(2*c);if(y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=Us,l=we,c=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),w=c?c.length:d.length,m=this.result;for(let x=0;!m.shouldStop&&x<w;x++){const g=c?c[x]:x,C=d[g],A=h[g],N=e,F=s;l.copy(u[C[0]]),N.vmult(l,l),l.vadd(F,l),l.vsub(p,l),N.vmult(A,r);const q=f.dot(r);if(Math.abs(q)<this.precision)continue;const T=r.dot(l)/q;if(!(T<0)){f.scale(T,$),$.vadd(p,$),J.copy(u[C[0]]),N.vmult(J,J),F.vadd(J,J);for(let R=1;!m.shouldStop&&R<C.length-1;R++){nt.copy(u[C[R]]),it.copy(u[C[R+1]]),N.vmult(nt,nt),N.vmult(it,it),F.vadd(nt,nt),F.vadd(it,it);const L=$.distanceTo(p);!(V.pointInTriangle($,J,nt,it)||V.pointInTriangle($,nt,J,it))||L>v||this.reportIntersection(r,$,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=$s,l=en,c=sn,d=we,u=Zs,h=Ks,f=Qs,p=tn,y=Js,v=t.indices;t.vertices;const w=this.from,m=this.to,x=this.direction;c.position.copy(s),c.quaternion.copy(e),O.vectorToLocalFrame(s,e,x,u),O.pointToLocalFrame(s,e,w,h),O.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,c,l);for(let C=0,A=l.length;!this.result.shouldStop&&C!==A;C++){const N=l[C];t.getNormal(N,r),t.getVertex(v[N*3],J),J.vsub(h,d);const F=u.dot(r),q=r.dot(d)/F;if(q<0)continue;u.scale(q,$),$.vadd(h,$),t.getVertex(v[N*3+1],nt),t.getVertex(v[N*3+2],it);const T=$.distanceSquared(h);!(V.pointInTriangle($,nt,J,it)||V.pointInTriangle($,J,nt,it))||T>g||(O.vectorToWorldFrame(e,r,y),O.pointToWorldFrame(s,e,$,p),this.reportIntersection(y,p,i,n,N))}l.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,l=o.distanceTo(e),c=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(c.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case V.ALL:this.hasHit=!0,c.set(o,r,t,e,s,n,l),c.hasHit=!0,this.callback(c);break;case V.CLOSEST:(l<c.distance||!c.hasHit)&&(this.hasHit=!0,c.hasHit=!0,c.set(o,r,t,e,s,n,l));break;case V.ANY:this.hasHit=!0,c.hasHit=!0,c.set(o,r,t,e,s,n,l),c.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,mt),s.vsub(e,Et),t.vsub(e,Zt);const i=mt.dot(mt),o=mt.dot(Et),r=mt.dot(Zt),l=Et.dot(Et),c=Et.dot(Zt);let d,u;return(d=l*r-o*c)>=0&&(u=i*c-o*r)>=0&&d+u<i*l-o*o}}V.CLOSEST=re.CLOSEST;V.ANY=re.ANY;V.ALL=re.ALL;const ve=new K,$t=[],Et=new a,Zt=new a,Vs=new a,Gs=new G,$=new a,J=new a,nt=new a,it=new a;new a;new Wt;const ye={faceList:[0]},Rt=new a,Hs=new V,Ys=[],Ds=new a,Xs=new a,Us=new a;new a;new a;const we=new a,$s=new a,Zs=new a,Ks=new a,Qs=new a,Js=new a,tn=new a;new K;const en=[],sn=new O,mt=new a,qt=new a;function nn(b,t,e){e.vsub(b,mt);const s=mt.dot(t);return t.scale(s,qt),qt.vadd(b,qt),e.distanceTo(qt)}class gt extends ke{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,l=n+o;return i-r<l}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,l;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const c=n[r];for(l=r+1;l<i;l++){const d=n[l];if(this.needBroadphaseCollision(c,d)){if(!gt.checkBounds(c,d,o))break;this.intersectionTest(c,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?gt.insertionSortX(t):e===1?gt.insertionSortY(t):e===2&&gt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,l=r.length,c=1/l;for(let f=0;f!==l;f++){const p=r[f],y=p.position.x;t+=y,e+=y*y;const v=p.position.y;s+=v,n+=v*v;const w=p.position.z;i+=w,o+=w*w}const d=e-t*t*c,u=n-s*s*c,h=o-i*i*c;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const l=o[r];l.aabbNeedsUpdate&&l.updateAABB(),l.aabb.overlaps(e)&&s.push(l)}return s}}class on{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class xe{constructor(){this.spatial=new a,this.rotational=new a}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class St{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=St.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new xe,this.jacobianElementB=new xe,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,l=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,l=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,l=n.torque,c=s.invMassSolve,d=n.invMassSolve;return i.scale(c,ge),r.scale(d,be),s.invInertiaWorldSolve.vmult(o,Ee),n.invInertiaWorldSolve.vmult(l,Ce),t.multiplyVectors(ge,Ee)+e.multiplyVectors(be,Ce)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,l=n.invInertiaWorldSolve;let c=i+o;return r.vmult(t.rotational,_t),c+=_t.dot(t.rotational),l.vmult(e.rotational,_t),c+=_t.dot(e.rotational),c}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=rn;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}St.idCounter=0;const ge=new a,be=new a,Ee=new a,Ce=new a,_t=new a,rn=new a;class an extends St{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new a,this.rj=new a,this.ni=new a}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,l=ln,c=cn,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=hn,y=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,l),r.cross(w,c),w.negate(y.spatial),l.negate(y.rotational),v.spatial.copy(w),v.rotational.copy(c),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=w.dot(p),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+f.dot(c)-u.dot(l),C=this.computeGiMf();return-m*e-g*s-t*C}getImpactVelocityAlongNormal(){const t=dn,e=un,s=pn,n=fn,i=mn;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const ln=new a,cn=new a,hn=new a,dn=new a,un=new a,pn=new a,fn=new a,mn=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class ze extends St{constructor(t,e,s){super(t,e,-s,s),this.ri=new a,this.rj=new a,this.t=new a}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=vn,o=yn,r=this.t;s.cross(r,i),n.cross(r,o);const l=this.jacobianElementA,c=this.jacobianElementB;r.negate(l.spatial),i.negate(l.rotational),c.spatial.copy(r),c.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const vn=new a,yn=new a;class Bt{constructor(t,e,s){s=on.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Bt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Bt.idCounter=0;class Nt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Nt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Nt.idCounter=0;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new V;new a;new a;new a;new a(1,0,0),new a(0,1,0),new a(0,0,1);new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class wn extends B{constructor(t){if(super({type:B.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new a);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const l=o[r];s[l]=t[l]-i,n[l]=t[l]+i}}}new a;new a;new a;new a;new a;new a;new a;new a;new a;class xn extends B{constructor(){super({type:B.types.PLANE}),this.worldNormal=new a,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new a),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){ot.set(0,0,1),e.vmult(ot,ot);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),ot.x===1?n.x=t.x:ot.x===-1&&(s.x=t.x),ot.y===1?n.y=t.y:ot.y===-1&&(s.y=t.y),ot.z===1?n.z=t.z:ot.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const ot=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new K;new a;new K;new a;new a;new a;new a;new a;new a;new a;new K;new a;new O;new K;class gn{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class bn extends gn{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,c=l.length,d=t;let u,h,f,p,y,v;if(r!==0)for(let g=0;g!==c;g++)l[g].updateSolveMassProperties();const w=Cn,m=zn,x=En;w.length=r,m.length=r,x.length=r;for(let g=0;g!==r;g++){const C=o[g];x[g]=0,m[g]=C.computeB(d),w[g]=1/C.computeC()}if(r!==0){for(let A=0;A!==c;A++){const N=l[A],F=N.vlambda,q=N.wlambda;F.set(0,0,0),q.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let A=0;A!==r;A++){const N=o[A];u=m[A],h=w[A],v=x[A],y=N.computeGWlambda(),f=h*(u-y-N.eps*v),v+f<N.minForce?f=N.minForce-v:v+f>N.maxForce&&(f=N.maxForce-v),x[A]+=f,p+=f>0?f:-f,N.addToWlambda(f)}if(p*p<i)break}for(let A=0;A!==c;A++){const N=l[A],F=N.velocity,q=N.angularVelocity;N.vlambda.vmul(N.linearFactor,N.vlambda),F.vadd(N.vlambda,F),N.wlambda.vmul(N.angularFactor,N.wlambda),q.vadd(N.wlambda,q)}let g=o.length;const C=1/d;for(;g--;)o[g].multiplier=x[g]*C}return s}}const En=[],Cn=[],zn=[];I.STATIC;class An{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Mn extends An{constructor(){super(...arguments),this.type=a}constructObject(){return new a}}const W={sphereSphere:B.types.SPHERE,spherePlane:B.types.SPHERE|B.types.PLANE,boxBox:B.types.BOX|B.types.BOX,sphereBox:B.types.SPHERE|B.types.BOX,planeBox:B.types.PLANE|B.types.BOX,convexConvex:B.types.CONVEXPOLYHEDRON,sphereConvex:B.types.SPHERE|B.types.CONVEXPOLYHEDRON,planeConvex:B.types.PLANE|B.types.CONVEXPOLYHEDRON,boxConvex:B.types.BOX|B.types.CONVEXPOLYHEDRON,sphereHeightfield:B.types.SPHERE|B.types.HEIGHTFIELD,boxHeightfield:B.types.BOX|B.types.HEIGHTFIELD,convexHeightfield:B.types.CONVEXPOLYHEDRON|B.types.HEIGHTFIELD,sphereParticle:B.types.PARTICLE|B.types.SPHERE,planeParticle:B.types.PLANE|B.types.PARTICLE,boxParticle:B.types.BOX|B.types.PARTICLE,convexParticle:B.types.PARTICLE|B.types.CONVEXPOLYHEDRON,cylinderCylinder:B.types.CYLINDER,sphereCylinder:B.types.SPHERE|B.types.CYLINDER,planeCylinder:B.types.PLANE|B.types.CYLINDER,boxCylinder:B.types.BOX|B.types.CYLINDER,convexCylinder:B.types.CONVEXPOLYHEDRON|B.types.CYLINDER,heightfieldCylinder:B.types.HEIGHTFIELD|B.types.CYLINDER,particleCylinder:B.types.PARTICLE|B.types.CYLINDER,sphereTrimesh:B.types.SPHERE|B.types.TRIMESH,planeTrimesh:B.types.PLANE|B.types.TRIMESH};class Sn{get[W.sphereSphere](){return this.sphereSphere}get[W.spherePlane](){return this.spherePlane}get[W.boxBox](){return this.boxBox}get[W.sphereBox](){return this.sphereBox}get[W.planeBox](){return this.planeBox}get[W.convexConvex](){return this.convexConvex}get[W.sphereConvex](){return this.sphereConvex}get[W.planeConvex](){return this.planeConvex}get[W.boxConvex](){return this.boxConvex}get[W.sphereHeightfield](){return this.sphereHeightfield}get[W.boxHeightfield](){return this.boxHeightfield}get[W.convexHeightfield](){return this.convexHeightfield}get[W.sphereParticle](){return this.sphereParticle}get[W.planeParticle](){return this.planeParticle}get[W.boxParticle](){return this.boxParticle}get[W.convexParticle](){return this.convexParticle}get[W.cylinderCylinder](){return this.convexConvex}get[W.sphereCylinder](){return this.sphereConvex}get[W.planeCylinder](){return this.planeConvex}get[W.boxCylinder](){return this.boxConvex}get[W.convexCylinder](){return this.convexConvex}get[W.heightfieldCylinder](){return this.heightfieldCylinder}get[W.particleCylinder](){return this.particleCylinder}get[W.sphereTrimesh](){return this.sphereTrimesh}get[W.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Mn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new an(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const c=s.material||t.material,d=n.material||e.material;return c&&d&&c.restitution>=0&&d.restitution>=0&&(r.restitution=c.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let c=l.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(c=d.friction*u.friction),c>0){const h=c*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,y=p.length?p.pop():new ze(s,n,h*f),v=p.length?p.pop():new ze(s,n,h*f);return y.bi=v.bi=s,y.bj=v.bj=n,y.minForce=v.minForce=-h*f,y.maxForce=v.maxForce=h*f,y.ri.copy(t.ri),y.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(y.t,v.t),y.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),v.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),y.enabled=v.enabled=t.enabled,e.push(y,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];ft.setZero(),wt.setZero(),xt.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(ft.vadd(e.ni,ft),wt.vadd(e.ri,wt),xt.vadd(e.rj,xt)):(ft.vsub(e.ni,ft),wt.vadd(e.rj,wt),xt.vadd(e.ri,xt));const o=1/t;wt.scale(o,s.ri),xt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),ft.normalize(),ft.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const l=In,c=Tn,d=Bn,u=Nn;for(let h=0,f=t.length;h!==f;h++){const p=t[h],y=e[h];let v=null;p.material&&y.material&&(v=s.getContactMaterial(p.material,y.material)||null);const w=p.type&I.KINEMATIC&&y.type&I.STATIC||p.type&I.STATIC&&y.type&I.KINEMATIC||p.type&I.KINEMATIC&&y.type&I.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],l),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const x=p.shapes[m];for(let g=0;g<y.shapes.length;g++){y.quaternion.mult(y.shapeOrientations[g],c),y.quaternion.vmult(y.shapeOffsets[g],u),u.vadd(y.position,u);const C=y.shapes[g];if(!(x.collisionFilterMask&C.collisionFilterGroup&&C.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+C.boundingSphereRadius)continue;let A=null;x.material&&C.material&&(A=s.getContactMaterial(x.material,C.material)||null),this.currentContactMaterial=A||v||s.defaultContactMaterial;const N=x.type|C.type,F=this[N];if(F){let q=!1;x.type<C.type?q=F.call(this,x,C,d,u,l,c,p,y,x,C,w):q=F.call(this,C,x,u,d,c,l,y,p,x,C,w),q&&w&&(s.shapeOverlapKeeper.set(x.id,C.id),s.bodyOverlapKeeper.set(p.id,y.id))}}}}}sphereSphere(t,e,s,n,i,o,r,l,c,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,l,t,e,c,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(l.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,l,c,d,u){const h=this.createContactEquation(r,l,t,e,c,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Lt),h.ni.scale(h.ni.dot(Lt),Ae),Lt.vsub(Ae,h.rj),-Lt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(l.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,l,c,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}sphereBox(t,e,s,n,i,o,r,l,c,d,u){const h=this.v3pool,f=ni;s.vsub(n,kt),e.getSideNormals(f,o);const p=t.radius;let y=!1;const v=oi,w=ri,m=ai;let x=null,g=0,C=0,A=0,N=null;for(let z=0,j=f.length;z!==j&&y===!1;z++){const _=ti;_.copy(f[z]);const k=_.length();_.normalize();const U=kt.dot(_);if(U<k+p&&U>0){const X=ei,P=si;X.copy(f[(z+1)%3]),P.copy(f[(z+2)%3]);const yt=X.length(),Ft=P.length();X.normalize(),P.normalize();const Yt=kt.dot(X),Dt=kt.dot(P);if(Yt<yt&&Yt>-yt&&Dt<Ft&&Dt>-Ft){const he=Math.abs(U-k-p);if((N===null||he<N)&&(N=he,C=Yt,A=Dt,x=k,v.copy(_),w.copy(X),m.copy(P),g++,u))return!0}}}if(g){y=!0;const z=this.createContactEquation(r,l,t,e,c,d);v.scale(-p,z.ri),z.ni.copy(v),z.ni.negate(z.ni),v.scale(x,v),w.scale(C,w),v.vadd(w,v),m.scale(A,m),v.vadd(m,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(l.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let F=h.get();const q=ii;for(let z=0;z!==2&&!y;z++)for(let j=0;j!==2&&!y;j++)for(let _=0;_!==2&&!y;_++)if(F.set(0,0,0),z?F.vadd(f[0],F):F.vsub(f[0],F),j?F.vadd(f[1],F):F.vsub(f[1],F),_?F.vadd(f[2],F):F.vsub(f[2],F),n.vadd(F,q),q.vsub(s,q),q.lengthSquared()<p*p){if(u)return!0;y=!0;const k=this.createContactEquation(r,l,t,e,c,d);k.ri.copy(q),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(F),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(l.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(F),F=null;const T=h.get(),R=h.get(),L=h.get(),E=h.get(),S=h.get(),M=f.length;for(let z=0;z!==M&&!y;z++)for(let j=0;j!==M&&!y;j++)if(z%3!==j%3){f[j].cross(f[z],T),T.normalize(),f[z].vadd(f[j],R),L.copy(s),L.vsub(R,L),L.vsub(n,L);const _=L.dot(T);T.scale(_,E);let k=0;for(;k===z%3||k===j%3;)k++;S.copy(s),S.vsub(E,S),S.vsub(R,S),S.vsub(n,S);const U=Math.abs(_),X=S.length();if(U<f[k].length()&&X<p){if(u)return!0;y=!0;const P=this.createContactEquation(r,l,t,e,c,d);R.vadd(E,P.rj),P.rj.copy(P.rj),S.negate(P.ni),P.ni.normalize(),P.ri.copy(P.rj),P.ri.vadd(n,P.ri),P.ri.vsub(s,P.ri),P.ri.normalize(),P.ri.scale(p,P.ri),P.ri.vadd(s,P.ri),P.ri.vsub(r.position,P.ri),P.rj.vadd(n,P.rj),P.rj.vsub(l.position,P.rj),this.result.push(P),this.createFrictionEquationsFromContact(P,this.frictionResult)}}h.release(T,R,L,E,S)}planeBox(t,e,s,n,i,o,r,l,c,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}convexConvex(t,e,s,n,i,o,r,l,c,d,u,h,f){const p=Ei;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const y=[],v=Ci;t.clipAgainstHull(s,i,e,n,o,p,-100,100,y);let w=0;for(let m=0;m!==y.length;m++){if(u)return!0;const x=this.createContactEquation(r,l,t,e,c,d),g=x.ri,C=x.rj;p.negate(x.ni),y[m].normal.negate(v),v.scale(y[m].depth,v),y[m].point.vadd(v,g),C.copy(y[m].point),g.vsub(s,g),C.vsub(n,C),g.vadd(s,g),g.vsub(r.position,g),C.vadd(n,C),C.vsub(l.position,C),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,l,c,d,u){const h=this.v3pool;s.vsub(n,li);const f=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let w=!1;for(let m=0;m!==y.length;m++){const x=y[m],g=ui;o.vmult(x,g),n.vadd(g,g);const C=di;if(g.vsub(s,C),C.lengthSquared()<v*v){if(u)return!0;w=!0;const A=this.createContactEquation(r,l,t,e,c,d);A.ri.copy(C),A.ri.normalize(),A.ni.copy(A.ri),A.ri.scale(v,A.ri),g.vsub(n,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.vadd(n,A.rj),A.rj.vsub(l.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult);return}}for(let m=0,x=p.length;m!==x&&w===!1;m++){const g=f[m],C=p[m],A=pi;o.vmult(g,A);const N=fi;o.vmult(y[C[0]],N),N.vadd(n,N);const F=mi;A.scale(-v,F),s.vadd(F,F);const q=vi;F.vsub(N,q);const T=q.dot(A),R=yi;if(s.vsub(N,R),T<0&&R.dot(A)>0){const L=[];for(let E=0,S=C.length;E!==S;E++){const M=h.get();o.vmult(y[C[E]],M),n.vadd(M,M),L.push(M)}if(Jn(L,A,s)){if(u)return!0;w=!0;const E=this.createContactEquation(r,l,t,e,c,d);A.scale(-v,E.ri),A.negate(E.ni);const S=h.get();A.scale(-T,S);const M=h.get();A.scale(-v,M),s.vsub(n,E.rj),E.rj.vadd(M,E.rj),E.rj.vadd(S,E.rj),E.rj.vadd(n,E.rj),E.rj.vsub(l.position,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),h.release(S),h.release(M),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult);for(let z=0,j=L.length;z!==j;z++)h.release(L[z]);return}else for(let E=0;E!==C.length;E++){const S=h.get(),M=h.get();o.vmult(y[C[(E+1)%C.length]],S),o.vmult(y[C[(E+2)%C.length]],M),n.vadd(S,S),n.vadd(M,M);const z=ci;M.vsub(S,z);const j=hi;z.unit(j);const _=h.get(),k=h.get();s.vsub(S,k);const U=k.dot(j);j.scale(U,_),_.vadd(S,_);const X=h.get();if(_.vsub(s,X),U>0&&U*U<z.lengthSquared()&&X.lengthSquared()<v*v){if(u)return!0;const P=this.createContactEquation(r,l,t,e,c,d);_.vsub(n,P.rj),_.vsub(s,P.ni),P.ni.normalize(),P.ni.scale(v,P.ri),P.rj.vadd(n,P.rj),P.rj.vsub(l.position,P.rj),P.ri.vadd(s,P.ri),P.ri.vsub(r.position,P.ri),this.result.push(P),this.createFrictionEquationsFromContact(P,this.frictionResult);for(let yt=0,Ft=L.length;yt!==Ft;yt++)h.release(L[yt]);h.release(S),h.release(M),h.release(_),h.release(X),h.release(k);return}h.release(S),h.release(M),h.release(_),h.release(X),h.release(k)}for(let E=0,S=L.length;E!==S;E++)h.release(L[E])}}}planeConvex(t,e,s,n,i,o,r,l,c,d,u){const h=wi,f=xi;f.set(0,0,1),i.vmult(f,f);let p=0;const y=gi;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,l,t,e,c,d),x=bi;f.scale(f.dot(y),x),h.vsub(x,x),x.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(l.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,l,c,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,l,c,d,u){const h=e.data,f=t.radius,p=e.elementSize,y=qi,v=Ri;O.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,m=Math.ceil((v.x+f)/p)+1,x=Math.floor((v.y-f)/p)-1,g=Math.ceil((v.y+f)/p)+1;if(m<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const C=[];e.getRectMinMax(w,x,m,g,C);const A=C[0],N=C[1];if(v.z-f>N||v.z+f<A)return;const F=this.result;for(let q=w;q<m;q++)for(let T=x;T<g;T++){const R=F.length;let L=!1;if(e.getConvexTrianglePillar(q,T,!1),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,l,t,e,u)),u&&L||(e.getConvexTrianglePillar(q,T,!0),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,l,t,e,u)),u&&L))return!0;if(F.length-R>2)return}}boxHeightfield(t,e,s,n,i,o,r,l,c,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,l,c,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,y=Fi,v=Pi,w=Ti;O.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,g=Math.floor((w.y-p)/f)-1,C=Math.ceil((w.y+p)/f)+1;if(x<0||C<0||m>h.length||g>h[0].length)return;m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),C<0&&(C=0),m>=h.length&&(m=h.length-1),x>=h.length&&(x=h.length-1),C>=h[0].length&&(C=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const A=[];e.getRectMinMax(m,g,x,C,A);const N=A[0],F=A[1];if(!(w.z-p>F||w.z+p<N))for(let q=m;q<x;q++)for(let T=g;T<C;T++){let R=!1;if(e.getConvexTrianglePillar(q,T,!1),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,l,null,null,u,v,null)),u&&R||(e.getConvexTrianglePillar(q,T,!0),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,l,null,null,u,v,null)),u&&R))return!0}}sphereParticle(t,e,s,n,i,o,r,l,c,d,u){const h=Si;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(l,r,e,t,c,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,l,c,d,u){const h=zi;h.set(0,0,1),r.quaternion.vmult(h,h);const f=Ai;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const y=this.createContactEquation(l,r,e,t,c,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const v=Mi;h.scale(h.dot(n),v),n.vsub(v,v),y.rj.copy(v),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,l,c,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexParticle(t,e,s,n,i,o,r,l,c,d,u){let h=-1;const f=Ni,p=Ii;let y=null;const v=Bi;if(v.copy(n),v.vsub(s,v),i.conjugate(Me),Me.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],Se);const C=-g.dot(Se);if(y===null||Math.abs(C)<Math.abs(y)){if(u)return!0;y=C,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(l,r,e,t,c,d);f.scale(y,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,x=w.rj;m.vadd(n,m),m.vsub(l.position,m),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,l,c,d,u){return this.convexHeightfield(e,t,n,s,o,i,l,r,c,d,u)}particleCylinder(t,e,s,n,i,o,r,l,c,d,u){return this.convexParticle(e,t,n,s,o,i,l,r,c,d,u)}sphereTrimesh(t,e,s,n,i,o,r,l,c,d,u){const h=On,f=Wn,p=jn,y=Vn,v=Gn,w=Hn,m=Un,x=kn,g=_n,C=$n;O.pointToLocalFrame(n,o,s,v);const A=t.radius;m.lowerBound.set(v.x-A,v.y-A,v.z-A),m.upperBound.set(v.x+A,v.y+A,v.z+A),e.getTrianglesInAABB(m,C);const N=Ln,F=t.radius*t.radius;for(let E=0;E<C.length;E++)for(let S=0;S<3;S++)if(e.getVertex(e.indices[C[E]*3+S],N),N.vsub(v,g),g.lengthSquared()<=F){if(x.copy(N),O.pointToWorldFrame(n,o,x,N),N.vsub(s,g),u)return!0;let M=this.createContactEquation(r,l,t,e,c,d);M.ni.copy(g),M.ni.normalize(),M.ri.copy(M.ni),M.ri.scale(t.radius,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.copy(N),M.rj.vsub(l.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}for(let E=0;E<C.length;E++)for(let S=0;S<3;S++){e.getVertex(e.indices[C[E]*3+S],h),e.getVertex(e.indices[C[E]*3+(S+1)%3],f),f.vsub(h,p),v.vsub(f,w);const M=w.dot(p);v.vsub(h,w);let z=w.dot(p);if(z>0&&M<0&&(v.vsub(h,w),y.copy(p),y.normalize(),z=w.dot(y),y.scale(z,w),w.vadd(h,w),w.distanceTo(v)<t.radius)){if(u)return!0;const _=this.createContactEquation(r,l,t,e,c,d);w.vsub(v,_.ni),_.ni.normalize(),_.ni.scale(t.radius,_.ri),_.ri.vadd(s,_.ri),_.ri.vsub(r.position,_.ri),O.pointToWorldFrame(n,o,w,w),w.vsub(l.position,_.rj),O.vectorToWorldFrame(o,_.ni,_.ni),O.vectorToWorldFrame(o,_.ri,_.ri),this.result.push(_),this.createFrictionEquationsFromContact(_,this.frictionResult)}}const q=Yn,T=Dn,R=Xn,L=qn;for(let E=0,S=C.length;E!==S;E++){e.getTriangleVertices(C[E],q,T,R),e.getNormal(C[E],L),v.vsub(q,w);let M=w.dot(L);if(L.scale(M,w),v.vsub(w,w),M=w.distanceTo(v),V.pointInTriangle(w,q,T,R)&&M<t.radius){if(u)return!0;let z=this.createContactEquation(r,l,t,e,c,d);w.vsub(v,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),O.pointToWorldFrame(n,o,w,w),w.vsub(l.position,z.rj),O.vectorToWorldFrame(o,z.ni,z.ni),O.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}C.length=0}planeTrimesh(t,e,s,n,i,o,r,l,c,d,u){const h=new a,f=Fn;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const y=new a;y.copy(h),O.pointToWorldFrame(n,o,y,h);const v=Pn;if(h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,l,t,e,c,d);m.ni.copy(f);const x=Rn;f.scale(v.dot(f),x),h.vsub(x,x),m.ri.copy(x),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(l.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const ft=new a,wt=new a,xt=new a,Bn=new a,Nn=new a,In=new G,Tn=new G,Fn=new a,Pn=new a,Rn=new a,qn=new a,_n=new a;new a;const Ln=new a,kn=new a,On=new a,Wn=new a,jn=new a,Vn=new a,Gn=new a,Hn=new a,Yn=new a,Dn=new a,Xn=new a,Un=new K,$n=[],Lt=new a,Ae=new a,Zn=new a,Kn=new a,Qn=new a;function Jn(b,t,e){let s=null;const n=b.length;for(let i=0;i!==n;i++){const o=b[i],r=Zn;b[(i+1)%n].vsub(o,r);const l=Kn;r.cross(t,l);const c=Qn;e.vsub(o,c);const d=l.dot(c);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const kt=new a,ti=new a,ei=new a,si=new a,ni=[new a,new a,new a,new a,new a,new a],ii=new a,oi=new a,ri=new a,ai=new a,li=new a,ci=new a,hi=new a,di=new a,ui=new a,pi=new a,fi=new a,mi=new a,vi=new a,yi=new a;new a;new a;const wi=new a,xi=new a,gi=new a,bi=new a,Ei=new a,Ci=new a,zi=new a,Ai=new a,Mi=new a,Si=new a,Me=new G,Bi=new a;new a;const Ni=new a,Se=new a,Ii=new a,Ti=new a,Fi=new a,Pi=[0],Ri=new a,qi=new a;class Be{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let l=0;l<i;l++){let c=!1;const d=s[l];for(;d>n[r];)r++;c=d===n[r],c||Ne(t,d)}r=0;for(let l=0;l<o;l++){let c=!1;const d=n[l];for(;d>s[r];)r++;c=s[r]===d,c||Ne(e,d)}}}function Ne(b,t){b.push((t&4294901760)>>16,t&65535)}const Kt=(b,t)=>b<t?`${b}-${t}`:`${t}-${b}`;class _i{constructor(){this.data={keys:[]}}get(t,e){const s=Kt(t,e);return this.data[s]}set(t,e,s){const n=Kt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Kt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Li extends Le{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new a,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new a,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new js,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new bn,this.constraints=[],this.narrowphase=new Sn(this),this.collisionMatrix=new fe,this.collisionMatrixPrevious=new fe,this.bodyOverlapKeeper=new Be,this.shapeOverlapKeeper=new Be,this.contactmaterials=[],this.contactMaterialTable=new _i,this.defaultMaterial=new Nt("default"),this.defaultContactMaterial=new Bt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Wt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=V.ALL,s.from=t,s.to=e,s.callback=n,Qt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=V.ANY,s.from=t,s.to=e,s.result=n,Qt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=V.CLOSEST,s.from=t,s.to=e,s.result=n,Qt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof I&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=Y.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=Y.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(Y.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Vi,n=Gi,i=this.bodies.length,o=this.bodies,r=this.solver,l=this.gravity,c=this.doProfiling,d=this.profile,u=I.DYNAMIC;let h=-1/0;const f=this.constraints,p=ji;l.length();const y=l.x,v=l.y,w=l.z;let m=0;for(c&&(h=Y.now()),m=0;m!==i;m++){const E=o[m];if(E.type===u){const S=E.force,M=E.mass;S.x+=M*y,S.y+=M*v,S.z+=M*w}}for(let E=0,S=this.subsystems.length;E!==S;E++)this.subsystems[E].update();c&&(h=Y.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),c&&(d.broadphase=Y.now()-h);let x=f.length;for(m=0;m!==x;m++){const E=f[m];if(!E.collideConnected)for(let S=s.length-1;S>=0;S-=1)(E.bodyA===s[S]&&E.bodyB===n[S]||E.bodyB===s[S]&&E.bodyA===n[S])&&(s.splice(S,1),n.splice(S,1))}this.collisionMatrixTick(),c&&(h=Y.now());const g=Wi,C=e.length;for(m=0;m!==C;m++)g.push(e[m]);e.length=0;const A=this.frictionEquations.length;for(m=0;m!==A;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,p),c&&(d.narrowphase=Y.now()-h),c&&(h=Y.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const N=e.length;for(let E=0;E!==N;E++){const S=e[E],M=S.bi,z=S.bj,j=S.si,_=S.sj;let k;if(M.material&&z.material?k=this.getContactMaterial(M.material,z.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,M.material&&z.material&&(M.material.friction>=0&&z.material.friction>=0&&M.material.friction*z.material.friction,M.material.restitution>=0&&z.material.restitution>=0&&(S.restitution=M.material.restitution*z.material.restitution)),r.addEquation(S),M.allowSleep&&M.type===I.DYNAMIC&&M.sleepState===I.SLEEPING&&z.sleepState===I.AWAKE&&z.type!==I.STATIC){const U=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),X=z.sleepSpeedLimit**2;U>=X*2&&(M.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===I.DYNAMIC&&z.sleepState===I.SLEEPING&&M.sleepState===I.AWAKE&&M.type!==I.STATIC){const U=M.velocity.lengthSquared()+M.angularVelocity.lengthSquared(),X=M.sleepSpeedLimit**2;U>=X*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(M,z,!0),this.collisionMatrixPrevious.get(M,z)||(Ct.body=z,Ct.contact=S,M.dispatchEvent(Ct),Ct.body=M,z.dispatchEvent(Ct)),this.bodyOverlapKeeper.set(M.id,z.id),this.shapeOverlapKeeper.set(j.id,_.id)}for(this.emitContactEvents(),c&&(d.makeContactConstraints=Y.now()-h,h=Y.now()),m=0;m!==i;m++){const E=o[m];E.wakeUpAfterNarrowphase&&(E.wakeUp(),E.wakeUpAfterNarrowphase=!1)}for(x=f.length,m=0;m!==x;m++){const E=f[m];E.update();for(let S=0,M=E.equations.length;S!==M;S++){const z=E.equations[S];r.addEquation(z)}}r.solve(t,this),c&&(d.solve=Y.now()-h),r.removeAllEquations();const F=Math.pow;for(m=0;m!==i;m++){const E=o[m];if(E.type&u){const S=F(1-E.linearDamping,t),M=E.velocity;M.scale(S,M);const z=E.angularVelocity;if(z){const j=F(1-E.angularDamping,t);z.scale(j,z)}}}this.dispatchEvent(Oi),c&&(h=Y.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,R=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,T,R);this.clearForces(),this.broadphase.dirty=!0,c&&(d.integrate=Y.now()-h),this.stepnumber+=1,this.dispatchEvent(ki);let L=!0;if(this.allowSleep)for(L=!1,m=0;m!==i;m++){const E=o[m];E.sleepTick(this.time),E.sleepState!==I.SLEEPING&&(L=!0)}this.hasActiveBodies=L}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(rt,at),t){for(let i=0,o=rt.length;i<o;i+=2)zt.bodyA=this.getBodyById(rt[i]),zt.bodyB=this.getBodyById(rt[i+1]),this.dispatchEvent(zt);zt.bodyA=zt.bodyB=null}if(e){for(let i=0,o=at.length;i<o;i+=2)At.bodyA=this.getBodyById(at[i]),At.bodyB=this.getBodyById(at[i+1]),this.dispatchEvent(At);At.bodyA=At.bodyB=null}rt.length=at.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(rt,at),s){for(let i=0,o=rt.length;i<o;i+=2){const r=this.getShapeById(rt[i]),l=this.getShapeById(rt[i+1]);lt.shapeA=r,lt.shapeB=l,r&&(lt.bodyA=r.body),l&&(lt.bodyB=l.body),this.dispatchEvent(lt)}lt.bodyA=lt.bodyB=lt.shapeA=lt.shapeB=null}if(n){for(let i=0,o=at.length;i<o;i+=2){const r=this.getShapeById(at[i]),l=this.getShapeById(at[i+1]);ct.shapeA=r,ct.shapeB=l,r&&(ct.bodyA=r.body),l&&(ct.bodyB=l.body),this.dispatchEvent(ct)}ct.bodyA=ct.bodyB=ct.shapeA=ct.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new K;const Qt=new V,Y=globalThis.performance||{};if(!Y.now){let b=Date.now();Y.timing&&Y.timing.navigationStart&&(b=Y.timing.navigationStart),Y.now=()=>Date.now()-b}new a;const ki={type:"postStep"},Oi={type:"preStep"},Ct={type:I.COLLIDE_EVENT_NAME,body:null,contact:null},Wi=[],ji=[],Vi=[],Gi=[],rt=[],at=[],zt={type:"beginContact",bodyA:null,bodyB:null},At={type:"endContact",bodyA:null,bodyB:null},lt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ct={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Ot="#262837",Hi=["#00ffc8","#ff5e00","#ff009d","#ff00f2","#5900ff"],Ie=Hi.map(b=>new Jt(b)),Yi=(b=Ot)=>{const t=new ne(window.innerWidth,window.innerHeight),e=new Qe,s=new ps({antialias:!0});s.shadowMap.enabled=!0,s.shadowMap.type=Je,s.setSize(t.x,t.y),s.setPixelRatio(Math.min(window.devicePixelRatio,2)),document.body.appendChild(s.domElement),e.fog=new ts(b,15,20),s.setClearColor(b);const n=new es(75,t.x/t.y,.1,60);n.lookAt(e.position),e.add(n);const i=new rs,o=new fs;return document.body.appendChild(o.dom),{sizes:t,scene:e,renderer:s,camera:n,clock:i,stats:o,resize:()=>{t.set(window.innerWidth,window.innerHeight),n.aspect=t.x/t.y,n.updateProjectionMatrix(),s.setSize(t.x,t.y),s.setPixelRatio(Math.min(window.devicePixelRatio,2))}}},Di=(b,t={},e={})=>{const s=new ss(t.color,t.intensity??2),n=new ns(e.color,e.intensity??.6);return n.castShadow=!0,n.shadow.mapSize.set(512,512),n.shadow.camera.far=30,n.shadow.camera.left=-16,n.shadow.camera.top=10,n.shadow.camera.right=16,n.shadow.camera.bottom=-10,n.position.set(15,7,5),b.add(s,n),{ambientLight:s,directionalLight:n}},Xi=(b,t=16767706,e=10,s=10)=>{const n=new is(new os(e,s),new Re({color:t}));return n.rotation.x=-Math.PI/2,n.position.y=-2,n.receiveShadow=!0,b.add(n),n},Ui=b=>b.hasOwnProperty("isHemisphereLight"),De=(b,t,e,s,n=!1)=>{let i=b.addFolder(s);if(i.close(),e.intensity&&i.add(e,"intensity",0,4,.01).onChange(o=>t.intensity=o),e.color&&i.addColor(e,"color").onChange(o=>t.color.set(new Jt(o))),e.hasOwnProperty("groundColor")&&Ui(t)&&i.addColor(e,"groundColor").onChange(o=>t.groundColor.set(new Jt(o))),n){let o=i.addFolder("Position");o.add(t.position,"x",-10,10),o.add(t.position,"y",-10,10),o.add(t.position,"z",-10,10),o.onChange(()=>t.shadow.camera.updateMatrix())}return i},te=(b,t,e,s,n,i,o={min:.5,max:1.5})=>{i instanceof pt||(i=new pt(Pt(i.x.min,i.x.max),Pt(i.y.min,i.y.max),Pt(i.z.min,i.z.max))),s[b]&&n.removeBody(s[b].body);let r=Pt(o.min,o.max)*2;const l=new qe;l.setPosition(i),l.scale(new pt(r,r,r)),t.setMatrixAt(b,l),t.setColorAt(b,Ie[b%Ie.length]);const c=e==="sphere"?new wn(r):new Vt(new a(r*.5,r*.5,r*.5)),d=new I({mass:1,shape:c});d.position.set(i.x,i.y,i.z),n.addBody(d),s[b]={scale:r,body:d},t.instanceMatrix.needsUpdate=!0,t.instanceColor&&(t.instanceColor.needsUpdate=!0)},Te=(b,t,e)=>{const s=new qe;if(!e[b]){console.log(`no data for index ${b} of instance`);return}let{body:n,scale:i}=e[b],o=n.position,r=n.quaternion;s.compose(new pt(o.x,o.y,o.z),new as(r.x,r.y,r.z,r.w),new pt(i,i,i)),t.setMatrixAt(b,s),t.instanceMatrix.needsUpdate=!0};let Xe=300,Ue=300;const H={floorMetalness:.3,floorRoughness:.6,shapeMetalness:.1,shapeRoughness:.5,fogColor:Ot,floorColor:Ot,directionalLight:{intensity:1,color:"#ffffff"},ambientLight:{intensity:1.5,color:"#ffffff"},hemisphereLight:{intensity:1,color:"#ffffff",groundColor:Ot},positions:{x:{min:-4,max:4},y:{min:3,max:3.5},z:{min:-3,max:4}},scales:{min:.25,max:.5}},{sizes:Fe,stats:$i,scene:bt,renderer:Gt,camera:It,clock:Zi,resize:Ki}=Yi(),{ambientLight:Qi,directionalLight:Ji}=Di(bt,H.ambientLight,H.directionalLight);window.addEventListener("resize",Ki);It.position.set(0,3,-10);It.lookAt(bt.position);It.updateProjectionMatrix();const ht=new Li({gravity:new a(0,-9.82,0),allowSleep:!0});ht.broadphase=new gt(ht);const ee=new Nt("default"),to=new Bt(ee,ee,{friction:.6,restitution:.3});ht.defaultContactMaterial=to;ht.defaultMaterial=ee;const Q=Xi(bt,H.floorColor,100,100);Q.material.metalness=H.floorMetalness;Q.material.roughness=H.floorRoughness;const ae=new I({shape:new xn});ae.position.set(Q.position.x,Q.position.y,Q.position.z);ae.quaternion.set(Q.quaternion.x,Q.quaternion.y,Q.quaternion.z,Q.quaternion.w);ht.addBody(ae);const eo=new ls(1,34,34),so=new cs(1,1,1),Ht=new Re({metalness:H.shapeMetalness,roughness:H.shapeRoughness}),ut=new _e(eo,Ht,Ue),tt=new _e(so,Ht,Xe);ut.castShadow=!0;tt.castShadow=!0;ut.count=0;tt.count=0;const D={max:Xe,physics:[],toAdd:20,lastTimeAdded:0,lastAddedIndex:-1,interval:.2},Z={max:Ue,physics:[],toAdd:20,lastTimeAdded:0,lastAddedIndex:-1,interval:.23};bt.add(tt,ut);const se=new ne,jt=new ne,Pe=new hs,$e=new ds(new pt(0,1,-.4));$e.translate(new pt(0,1,0));const no=()=>{Pe.setFromCamera(se,It);const b=new pt,t=Pe.ray.intersectPlane($e,b);if(!t)return;t.z>7&&(b.z=7),t.y>5&&(b.y=5);let e=(D.lastAddedIndex+1)%D.max;tt.count<e+1&&(tt.count=e+1),te(e,tt,"box",D.physics,ht,b,H.scales),D.lastAddedIndex=e};Gt.domElement.addEventListener("mousedown",b=>{jt.x=b.clientX,jt.y=b.clientY});Gt.domElement.addEventListener("mouseup",b=>{const t=Math.abs(jt.x-b.clientX),e=Math.abs(jt.y-b.clientY);t<5&&e<5&&(se.x=b.clientX/Fe.width*2-1,se.y=-(b.clientY/Fe.height)*2+1,no())});const Tt=new us,Ze={add20Spheres:()=>{Z.toAdd+=20,Z.interval=.12,le.disable()},add20Boxes:()=>{D.toAdd+=20,D.interval=.11,ce.disable()}};let le=Tt.add(Ze,"add20Spheres"),ce=Tt.add(Ze,"add20Boxes");le.disable();ce.disable();let vt=Tt.addFolder("Materials + Colors");vt.close();vt.add(H,"floorMetalness",0,1,.01).onChange(b=>Q.material.metalness=b);vt.add(H,"floorRoughness",0,1,.01).onChange(b=>Q.material.roughness=b);vt.add(H,"shapeMetalness",0,1,.01).onChange(b=>Ht.metalness=b);vt.add(H,"shapeRoughness",0,1,.01).onChange(b=>Ht.roughness=b);vt.addColor(H,"fogColor").onChange(b=>{bt.fog?.color.set(b),Gt.setClearColor(b)});vt.addColor(H,"floorColor").onChange(b=>Q.material.color.set(b));De(Tt,Qi,H.ambientLight,"Ambient Light");De(Tt,Ji,H.directionalLight,"Directional Light");function Ke(){requestAnimationFrame(Ke);const b=Zi.getElapsedTime();if(ht.fixedStep(),D.toAdd>0&&b-D.lastTimeAdded>D.interval){D.lastTimeAdded=b;let s=(D.lastAddedIndex+1)%D.max;tt.count<s+1&&(tt.count=s+1),te(s,tt,"box",D.physics,ht,H.positions,H.scales),D.lastAddedIndex=s,D.toAdd--}if(Z.toAdd>0&&b-Z.lastTimeAdded>Z.interval){Z.lastTimeAdded=b;let s=(Z.lastAddedIndex+1)%Z.max;ut.count<s+1&&(ut.count=s+1),te(s,ut,"sphere",Z.physics,ht,H.positions,H.scales),Z.lastAddedIndex=s,Z.toAdd--}D.toAdd===0&&ce.enable(),Z.toAdd===0&&le.enable();let t=ut.count;for(let s=0;s<t;s++)Te(s,ut,Z.physics);let e=tt.count;for(let s=0;s<e;s++)Te(s,tt,D.physics);Gt.render(bt,It),$i.update()}requestAnimationFrame(Ke);
